-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=875.000000,HLS_SYN_LAT=10007,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=41,HLS_SYN_FF=3951,HLS_SYN_LUT=6675}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv40_FFFFFF8000 : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111000000000000000";
    constant ap_const_lv40_7FFF : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_precision_V : STD_LOGIC_VECTOR (3 downto 0);
    signal W_V : STD_LOGIC_VECTOR (31 downto 0);
    signal W_precision_V : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out_precision_V : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten3_reg_2631 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid2_reg_2650 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten3_reg_2631_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid2_reg_2650_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten3_reg_2631_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid2_reg_2650_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten3_reg_423 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_op_assign_7_reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_445 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_op_assign_9_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0807_2_reg_467 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_op_assign_reg_479 : STD_LOGIC_VECTOR (13 downto 0);
    signal relu_en_V_read_reg_2270 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_2275 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_2280 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_2285 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_2291 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_2298 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_2303 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V_read_reg_2309 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_2314 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_reg_2319 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_reg_2324 : STD_LOGIC_VECTOR (27 downto 0);
    signal CHin_div_K_V_reg_2329 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_truncate_V_fu_580_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_truncate_V_reg_2338 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_1_fu_702_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_2343 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_710_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_2348 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_5_cast_fu_730_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_5_cast_reg_2353 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_7_cast_fu_780_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_7_cast_reg_2370 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_fu_818_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_cast_reg_2386 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_6_cast_fu_821_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_6_cast_reg_2391 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_11_cast_fu_824_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_11_cast_reg_2396 : STD_LOGIC_VECTOR (46 downto 0);
    signal Wout_V_fu_831_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_2401 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_847_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_2406 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_850_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_2411 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_12_cast1_cast_fu_853_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_12_cast1_cast_reg_2416 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_12_cast_cast_fu_856_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_12_cast_cast_reg_2421 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_fu_859_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_10_reg_2426 : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_2_cast1_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_cast1_reg_2431 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_cast_cast_fu_866_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_V_2_cast_cast_reg_2437 : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_V_5_cast_fu_870_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal rhs_V_5_cast_reg_2442 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_18_fu_874_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_2447 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_reg_2453 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_2458 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_8_cast_fu_883_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_8_cast_reg_2464 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_9_cast_fu_886_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal rhs_V_9_cast_reg_2469 : STD_LOGIC_VECTOR (44 downto 0);
    signal rhs_V_10_cast1_cast_fu_889_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_10_cast1_cast_reg_2474 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_10_cast_cast_fu_892_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_10_cast_cast_reg_2479 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_11_cast_fu_895_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal rhs_V_11_cast_reg_2484 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_20_fu_898_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_20_reg_2489 : STD_LOGIC_VECTOR (20 downto 0);
    signal bound_fu_2101_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal bound_reg_2495 : STD_LOGIC_VECTOR (21 downto 0);
    signal bound4_fu_2108_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound4_reg_2500 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound1_fu_2114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound1_reg_2505 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound2_fu_920_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound2_reg_2510 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond2_mid_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_mid_reg_2515 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_mid_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_mid_reg_2520 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_2121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_reg_2525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal indvar_flatten_next2_fu_946_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal indvar_flatten_next2_reg_2533 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_flatten_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2538 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_mid2_v_v_v_v_v_fu_963_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_v_v_v_reg_2546 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_fu_988_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_4_mid2_reg_2551 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_24_fu_993_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_reg_2556 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_13_mid2_fu_1013_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_mid2_reg_2561 : STD_LOGIC_VECTOR (44 downto 0);
    signal exitcond2_mid1_fu_1023_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_mid1_reg_2566 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_8_mid2_fu_1036_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_8_mid2_reg_2573 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2138_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_reg_2579 : STD_LOGIC_VECTOR (15 downto 0);
    signal Lo_assign_cast_mid2_s_fu_1051_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_cast_mid2_s_reg_2588 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal Hi_assign_cast_mid2_s_fu_1058_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_cast_mid2_s_reg_2594 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_8_mid2_fu_1086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_mid2_reg_2600 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_mid2_fu_1098_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_mid2_reg_2605 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_6_mid2_fu_1103_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_6_mid2_reg_2611 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_10_cast_fu_1110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_10_cast_reg_2616 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_mid_fu_1116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_mid_reg_2621 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_2626 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state26_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_predicate_op394_readreq_state28 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op405_read_state34 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_2631_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_2631_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_2631_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_1226_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten_next3_reg_2635 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp4_mid2_v_v_v_v_v_s_fu_1301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_mid2_v_v_v_v_v_s_reg_2640 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_mid2_fu_1391_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_op_assign_mid2_reg_2645 : STD_LOGIC_VECTOR (13 downto 0);
    signal brmerge1_mid2_fu_1464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid2_reg_2650_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid2_reg_2650_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_9_mid2_fu_1490_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_9_mid2_reg_2654 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_in_V2_sum_fu_1524_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal feature_in_V2_sum_reg_2659 : STD_LOGIC_VECTOR (46 downto 0);
    signal W_V4_sum_fu_1552_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal W_V4_sum_reg_2664 : STD_LOGIC_VECTOR (45 downto 0);
    signal indvar_flatten_next_fu_1563_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal indvar_flatten_next_reg_2669 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_state27_pp0_stage1_iter0 : BOOLEAN;
    signal ap_predicate_op389_readreq_state27 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter3 : BOOLEAN;
    signal ap_predicate_op407_read_state35 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal cin_fu_1581_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal cin_reg_2680 : STD_LOGIC_VECTOR (13 downto 0);
    signal dat_V_reg_2691 : STD_LOGIC_VECTOR (127 downto 0);
    signal wt_V_reg_2696 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_65_fu_1596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_reg_2701 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_1600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_reg_2706 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_29_1_fu_2207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_1_reg_2711 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_2_reg_2716 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_2_reg_2721 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_3_reg_2726 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_3_reg_2731 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_4_reg_2736 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_4_reg_2741 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_5_reg_2746 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_5_reg_2751 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_6_reg_2756 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_6_reg_2761 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_7_reg_2766 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_7_reg_2771 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_7_fu_1848_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal feature_out_V6_sum_fu_1871_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal feature_out_V6_sum_reg_2781 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_fu_1876_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_2786 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next1_fu_1887_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next1_reg_2791 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_2796 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_2803 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_2095_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_reg_2808 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state26 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal indvar_flatten1_reg_366 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_op_assign_s_reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten2_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_6_reg_400 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_8_reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_indvar_flatten3_phi_fu_427_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_i_op_assign_7_phi_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_449_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_phi_mux_i_op_assign_9_phi_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_483_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_p_Val2_2_phi_fu_494_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_p_Val2_1_phi_fu_505_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal feature_in_V2_sum_ca_fu_1571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V4_sum_cast_fu_1586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out_V6_sum_c_fu_1894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal lhs_V_cast_fu_542_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_tr_fu_546_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_566_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_562_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_fu_574_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_570_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_cast_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_tr_fu_590_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg1_fu_604_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_fu_644_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_4_tr_fu_648_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg2_fu_662_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_678_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_636_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_5_fu_718_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_cast_fu_726_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_734_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_cast_fu_740_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_3_cast_fu_744_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_7_fu_748_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_762_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_9_fu_768_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_9_cast_fu_776_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_s_fu_784_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_cast_fu_790_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_6_cast_fu_794_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_798_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_812_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_812_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_827_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_812_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_837_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hout_V_fu_841_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound2_fu_920_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound2_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_957_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_971_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_4_mid2_v_v_fu_2126_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_4_mid2_fu_988_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_fu_988_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_13_mid2_v_v_v_v_fu_2132_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_13_mid2_v_v_fu_1004_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_mid2_v_v_fu_1004_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_13_mid2_v_v_fu_1004_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_13_mid2_fu_1013_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_mid2_fu_1013_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal exitcond_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_2144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_6_mid_fu_1044_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_fu_1076_p2 : signal is "no";
    signal r_V_8_mid1_fu_2150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_mid_fu_1064_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_mid1_fu_2156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_mid264_v_fu_1070_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_mid2_v_fu_1092_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_cast_mid_fu_1113_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt1_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1130_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_1134_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_10_cast_fu_1143_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_1162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of w_V_fu_1162_p2 : signal is "no";
    signal tmp_31_fu_1167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_cast_fu_1173_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt2_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_2162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_fu_1177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii8_fu_1245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_mid1_fu_1251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_mid1_fu_1255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_mid1_fu_2175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_10_cast_mid1_fu_1272_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt3_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_mid2_v_v_v_v_fu_2182_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_38_cast_fu_2169_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_34_mid_fu_1316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_mid_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_mid_fu_1355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp3_mid_fu_1355_p2 : signal is "no";
    signal tmp3_fu_1216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp3_fu_1216_p2 : signal is "no";
    signal exitcond1_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_9_mid_fu_1237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_mid1_fu_1372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_fu_1379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_mid1_fu_1399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_mid1_fu_1403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of w_V_mid1_fu_1403_p2 : signal is "no";
    signal h_V_mid2_fu_1260_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_cast_mid1_fu_2195_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_38_cast_mid_fu_1321_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_34_mid1_fu_1408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_cast_mid1_fu_1414_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt4_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_not_mid2_fu_1293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid1_fu_1452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid1_fu_1458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_mid3_fu_1347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_16_mid2_fu_1276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_mid1_fu_1418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid1_fu_1472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_mid236_v_fu_1359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_mid2_v_fu_1478_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_2201_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_1505_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_fu_1505_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_1505_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_15_cast_fu_1510_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp3_cast_mid2_fu_1486_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_38_fu_1514_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_46_cast_cast_fu_1520_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_48_cast_fu_1529_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_38_cast_mid2_fu_1426_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp5_fu_1533_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2188_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp5_cast_fu_1539_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_39_fu_1543_p2 : STD_LOGIC_VECTOR (44 downto 0);
    attribute use_dsp48 of tmp_39_fu_1543_p2 : signal is "no";
    signal tmp_51_cast_cast_fu_1548_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal indvar_flatten_op_fu_1557_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_5_1_fu_1604_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_1_fu_1614_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_29_3_fu_2231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_5_fu_2247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_7_fu_2263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2213_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_2222_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp7_cast_fu_1806_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp8_cast_fu_1809_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp6_fu_1812_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_2238_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_2254_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp10_cast_fu_1822_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp11_cast_fu_1825_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp9_fu_1828_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp6_cast_fu_1818_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp9_cast_fu_1834_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_40_fu_1838_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_cast_fu_1844_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp12_fu_1854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_cast_fu_1858_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_35_fu_1862_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_40_cast_cast_fu_1867_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal indvar_flatten47_op_fu_1881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_1904_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1917_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_13_fu_1925_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_42_fu_1930_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_fu_1940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_35_fu_1952_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_0247_1_fu_1966_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_44_fu_1982_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_1978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1985_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_1988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_1994_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_2010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_2002_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_2018_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_fu_1974_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_51_fu_2024_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_54_fu_2036_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_55_fu_2042_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_52_fu_2028_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_53_fu_2032_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_57_fu_2060_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_58_fu_2066_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_2072_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_59_fu_2078_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_56_fu_2052_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_60_fu_2084_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_61_fu_2089_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_2101_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_2101_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bound4_fu_2108_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound4_fu_2108_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal bound1_fu_2114_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound1_fu_2114_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_2121_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_2121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_fu_2126_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_fu_2126_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_13_mid2_v_v_v_v_fu_2132_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_13_mid2_v_v_v_v_fu_2132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2138_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2138_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_2144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_8_mid1_fu_2150_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_mid1_fu_2150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_mid1_fu_2156_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_2162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_cast_fu_2169_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_cast_fu_2169_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_16_mid1_fu_2175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_mid2_v_v_v_v_fu_2182_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_mid2_v_v_v_v_fu_2182_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_2188_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_cast_mid1_fu_2195_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_cast_mid1_fu_2195_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_10_fu_2201_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_2201_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_762_ap_start : STD_LOGIC;
    signal grp_fu_762_ap_done : STD_LOGIC;
    signal grp_fu_812_ap_start : STD_LOGIC;
    signal grp_fu_812_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound1_fu_2114_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound1_fu_2114_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound2_fu_920_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound2_fu_920_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound4_fu_2108_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound4_fu_2108_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound_fu_2101_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal bound_fu_2101_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2188_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_762_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_812_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_10_fu_2201_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_1505_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_mid2_fu_1013_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_mid2_v_v_fu_1004_p10 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_13_mid2_v_v_v_v_fu_2132_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_4_mid2_fu_988_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_4_mid2_v_v_fu_2126_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_8_fu_2121_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_mid1_fu_2150_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid2_v_v_v_v_fu_2182_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_38_cast_fu_2169_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_38_cast_mid1_fu_2195_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_condition_752 : BOOLEAN;
    signal ap_condition_766 : BOOLEAN;

    component Conv_sdiv_19s_9nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_8ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component Conv_mul_mul_8ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component Conv_mul_mul_16nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Conv_mul_mul_14nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component Conv_mac_mul_sub_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16s_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_8ns_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16s_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_8ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Conv_mac_muladd_2mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (44 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component Conv_mul_mul_16nsncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component Conv_mul_mul_16s_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_1pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_in_precision_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        W_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_precision_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        feature_out_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out_precision_V : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in_V => feature_in_V,
        feature_in_precision_V => feature_in_precision_V,
        W_V => W_V,
        W_precision_V => W_precision_V,
        feature_out_V => feature_out_V,
        feature_out_precision_V => feature_out_precision_V);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_2796,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => p_Result_s_reg_2808,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_sdiv_19s_9nsbkb_U1 : component Conv_sdiv_19s_9nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_762_ap_start,
        done => grp_fu_762_ap_done,
        din0 => grp_fu_762_p0,
        din1 => grp_fu_762_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p2);

    Conv_sdiv_19s_9nsbkb_U2 : component Conv_sdiv_19s_9nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_812_ap_start,
        done => grp_fu_812_ap_done,
        din0 => grp_fu_812_p0,
        din1 => grp_fu_812_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_812_p2);

    Conv_mul_mul_8ns_cud_U3 : component Conv_mul_mul_8ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => bound_fu_2101_p0,
        din1 => bound_fu_2101_p1,
        dout => bound_fu_2101_p2);

    Conv_mul_mul_8ns_dEe_U4 : component Conv_mul_mul_8ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 22,
        dout_WIDTH => 30)
    port map (
        din0 => bound4_fu_2108_p0,
        din1 => bound4_fu_2108_p1,
        dout => bound4_fu_2108_p2);

    Conv_mul_mul_16nseOg_U5 : component Conv_mul_mul_16nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound1_fu_2114_p0,
        din1 => bound1_fu_2114_p1,
        dout => bound1_fu_2114_p2);

    Conv_mul_mul_16nseOg_U6 : component Conv_mul_mul_16nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_8_fu_2121_p0,
        din1 => r_V_8_fu_2121_p1,
        dout => r_V_8_fu_2121_p2);

    Conv_mul_mul_16nsfYi_U7 : component Conv_mul_mul_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => r_V_4_mid2_v_v_fu_2126_p0,
        din1 => r_V_4_mid2_v_v_fu_2126_p1,
        dout => r_V_4_mid2_v_v_fu_2126_p2);

    Conv_mul_mul_14nsg8j_U8 : component Conv_mul_mul_14nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_13_mid2_v_v_v_v_fu_2132_p0,
        din1 => r_V_13_mid2_v_v_v_v_fu_2132_p1,
        dout => r_V_13_mid2_v_v_v_v_fu_2132_p2);

    Conv_mac_mul_sub_hbi_U9 : component Conv_mac_mul_sub_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2138_p0,
        din1 => grp_fu_2138_p1,
        din2 => grp_fu_2138_p2,
        dout => grp_fu_2138_p3);

    Conv_mul_mul_16s_ibs_U10 : component Conv_mul_mul_16s_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => i_op_assign_6_reg_400,
        din1 => tmp_25_fu_2144_p1,
        dout => tmp_25_fu_2144_p2);

    Conv_mul_mul_16nseOg_U11 : component Conv_mul_mul_16nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_8_mid1_fu_2150_p0,
        din1 => r_V_8_mid1_fu_2150_p1,
        dout => r_V_8_mid1_fu_2150_p2);

    Conv_mul_mul_8ns_jbC_U12 : component Conv_mul_mul_8ns_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_27_mid1_fu_2156_p0,
        din1 => i_fu_1076_p2,
        dout => tmp_27_mid1_fu_2156_p2);

    Conv_mul_mul_16s_kbM_U13 : component Conv_mul_mul_16s_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => h_V_fu_1134_p2,
        din1 => r_V_2_fu_2162_p1,
        dout => r_V_2_fu_2162_p2);

    Conv_mul_mul_8ns_lbW_U14 : component Conv_mul_mul_8ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_38_cast_fu_2169_p0,
        din1 => tmp_38_cast_fu_2169_p1,
        dout => tmp_38_cast_fu_2169_p2);

    Conv_mul_mul_16s_kbM_U15 : component Conv_mul_mul_16s_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => h_V_mid1_fu_1255_p2,
        din1 => r_V_16_mid1_fu_2175_p1,
        dout => r_V_16_mid1_fu_2175_p2);

    Conv_mul_mul_8ns_cud_U16 : component Conv_mul_mul_8ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => tmp4_mid2_v_v_v_v_fu_2182_p0,
        din1 => tmp4_mid2_v_v_v_v_fu_2182_p1,
        dout => tmp4_mid2_v_v_v_v_fu_2182_p2);

    Conv_mac_muladd_2mb6_U17 : component Conv_mac_muladd_2mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 8,
        din2_WIDTH => 45,
        dout_WIDTH => 45)
    port map (
        din0 => grp_fu_2188_p0,
        din1 => grp_fu_2188_p1,
        din2 => r_V_13_mid2_reg_2561,
        dout => grp_fu_2188_p3);

    Conv_mul_mul_8ns_lbW_U18 : component Conv_mul_mul_8ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_38_cast_mid1_fu_2195_p0,
        din1 => tmp_38_cast_mid1_fu_2195_p1,
        dout => tmp_38_cast_mid1_fu_2195_p2);

    Conv_mul_mul_16nsncg_U19 : component Conv_mul_mul_16nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_10_fu_2201_p0,
        din1 => r_V_10_fu_2201_p1,
        dout => r_V_10_fu_2201_p2);

    Conv_mul_mul_16s_ocq_U20 : component Conv_mul_mul_16s_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_Result_5_1_fu_1604_p4,
        din1 => p_Result_6_1_fu_1614_p4,
        dout => r_V_29_1_fu_2207_p2);

    Conv_mac_muladd_1pcA_U21 : component Conv_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => tmp_65_reg_2701,
        din1 => tmp_66_reg_2706,
        din2 => r_V_29_1_reg_2711,
        dout => grp_fu_2213_p3);

    Conv_mac_muladd_1pcA_U22 : component Conv_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => p_Result_5_2_reg_2716,
        din1 => p_Result_6_2_reg_2721,
        din2 => r_V_29_3_fu_2231_p2,
        dout => grp_fu_2222_p3);

    Conv_mul_mul_16s_ocq_U23 : component Conv_mul_mul_16s_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_Result_5_3_reg_2726,
        din1 => p_Result_6_3_reg_2731,
        dout => r_V_29_3_fu_2231_p2);

    Conv_mac_muladd_1pcA_U24 : component Conv_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => p_Result_5_4_reg_2736,
        din1 => p_Result_6_4_reg_2741,
        din2 => r_V_29_5_fu_2247_p2,
        dout => grp_fu_2238_p3);

    Conv_mul_mul_16s_ocq_U25 : component Conv_mul_mul_16s_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_Result_5_5_reg_2746,
        din1 => p_Result_6_5_reg_2751,
        dout => r_V_29_5_fu_2247_p2);

    Conv_mac_muladd_1pcA_U26 : component Conv_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => p_Result_5_6_reg_2756,
        din1 => p_Result_6_6_reg_2761,
        din2 => r_V_29_7_fu_2263_p2,
        dout => grp_fu_2254_p3);

    Conv_mul_mul_16s_ocq_U27 : component Conv_mul_mul_16s_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_Result_5_7_reg_2766,
        din1 => p_Result_6_7_reg_2771,
        dout => r_V_29_7_fu_2263_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_predicate_op394_readreq_state28 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_predicate_op389_readreq_state27 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op394_readreq_state28 = ap_const_boolean_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_predicate_op389_readreq_state27 = ap_const_boolean_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_6_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_op_assign_6_reg_400 <= i_op_assign_6_mid2_reg_2611;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_op_assign_6_reg_400 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_7_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
                i_op_assign_7_reg_434 <= tmp4_mid2_v_v_v_v_v_s_reg_2640;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_op_assign_7_reg_434 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_8_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_op_assign_8_reg_412 <= j_reg_2786;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_op_assign_8_reg_412 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_9_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
                i_op_assign_9_reg_456 <= i_op_assign_9_mid2_reg_2654;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_op_assign_9_reg_456 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
                i_op_assign_reg_479 <= cin_reg_2680;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_op_assign_reg_479 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_op_assign_s_reg_377 <= r_V_4_mid2_v_v_v_v_v_reg_2546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_op_assign_s_reg_377 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                indvar_flatten1_reg_366 <= indvar_flatten_next2_reg_2533;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten1_reg_366 <= ap_const_lv48_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                indvar_flatten2_reg_388 <= indvar_flatten_next1_reg_2791;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten2_reg_388 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
                indvar_flatten3_reg_423 <= indvar_flatten_next3_reg_2635;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                indvar_flatten3_reg_423 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
                indvar_flatten_reg_445 <= indvar_flatten_next_reg_2669;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                indvar_flatten_reg_445 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    p_0807_2_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten3_reg_2631_pp0_iter5_reg = ap_const_lv1_0))) then 
                p_0807_2_reg_467 <= sum_V_7_fu_1848_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_0807_2_reg_467 <= ap_const_lv40_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                CHin_div_K_V_reg_2329 <= r_V_1_tr_fu_546_p2(16 downto 3);
                CHout_V_read_reg_2298 <= CHout_V;
                Hin_V_read_reg_2309 <= Hin_V;
                Kx_V_read_reg_2291 <= Kx_V;
                Ky_V_read_reg_2285 <= Ky_V;
                Sx_V_read_reg_2280 <= Sx_V;
                Sy_V_read_reg_2275 <= Sy_V;
                Win_V_read_reg_2303 <= Win_V;
                    lhs_V_5_cast_reg_2353(15 downto 0) <= lhs_V_5_cast_fu_730_p1(15 downto 0);
                    lhs_V_7_cast_reg_2370(15 downto 0) <= lhs_V_7_cast_fu_780_p1(15 downto 0);
                out_truncate_V_reg_2338 <= out_truncate_V_fu_580_p2;
                p_1_reg_2343 <= p_1_fu_702_p3;
                p_2_reg_2348 <= p_2_fu_710_p3;
                relu_en_V_read_reg_2270 <= relu_en_V;
                tmp_1_reg_2319 <= W_V(31 downto 4);
                tmp_2_reg_2324 <= feature_in_V(31 downto 4);
                tmp_reg_2314 <= feature_out_V(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    Hi_assign_cast_mid2_s_reg_2594(6 downto 4) <= Hi_assign_cast_mid2_s_fu_1058_p2(6 downto 4);
                    Lo_assign_cast_mid2_s_reg_2588(6 downto 4) <= Lo_assign_cast_mid2_s_fu_1051_p3(6 downto 4);
                    i_op_assign_10_cast_reg_2616(15 downto 0) <= i_op_assign_10_cast_fu_1110_p1(15 downto 0);
                i_op_assign_6_mid2_reg_2611 <= i_op_assign_6_mid2_fu_1103_p3;
                r_V_8_mid2_reg_2600 <= r_V_8_mid2_fu_1086_p3;
                rev_reg_2626 <= rev_fu_1124_p2;
                tmp_28_mid2_reg_2605 <= tmp_28_mid2_fu_1098_p2;
                tmp_37_cast_mid_reg_2621 <= tmp_37_cast_mid_fu_1116_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (brmerge1_mid2_fu_1464_p3 = ap_const_lv1_0) and (exitcond_flatten3_fu_1221_p2 = ap_const_lv1_0))) then
                W_V4_sum_reg_2664 <= W_V4_sum_fu_1552_p2;
                feature_in_V2_sum_reg_2659 <= feature_in_V2_sum_fu_1524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                Wout_V_reg_2401 <= Wout_V_fu_831_p2;
                bound1_reg_2505 <= bound1_fu_2114_p2;
                bound2_reg_2510 <= bound2_fu_920_p2;
                bound4_reg_2500 <= bound4_fu_2108_p2;
                bound_reg_2495 <= bound_fu_2101_p2;
                exitcond2_mid_reg_2515 <= exitcond2_mid_fu_926_p2;
                exitcond3_mid_reg_2520 <= exitcond3_mid_fu_932_p2;
                    rhs_V_10_cast1_cast_reg_2474(7 downto 0) <= rhs_V_10_cast1_cast_fu_889_p1(7 downto 0);
                    rhs_V_10_cast_cast_reg_2479(7 downto 0) <= rhs_V_10_cast_cast_fu_892_p1(7 downto 0);
                    rhs_V_11_cast_reg_2484(7 downto 0) <= rhs_V_11_cast_fu_895_p1(7 downto 0);
                    rhs_V_12_cast1_cast_reg_2416(13 downto 0) <= rhs_V_12_cast1_cast_fu_853_p1(13 downto 0);
                    rhs_V_12_cast_cast_reg_2421(13 downto 0) <= rhs_V_12_cast_cast_fu_856_p1(13 downto 0);
                    rhs_V_1_reg_2458(15 downto 0) <= rhs_V_1_fu_880_p1(15 downto 0);
                    rhs_V_2_cast1_reg_2431(15 downto 0) <= rhs_V_2_cast1_fu_862_p1(15 downto 0);
                    rhs_V_2_cast_cast_reg_2437(15 downto 0) <= rhs_V_2_cast_cast_fu_866_p1(15 downto 0);
                    rhs_V_5_cast_reg_2442(15 downto 0) <= rhs_V_5_cast_fu_870_p1(15 downto 0);
                    rhs_V_8_cast_reg_2464(15 downto 0) <= rhs_V_8_cast_fu_883_p1(15 downto 0);
                    rhs_V_9_cast_reg_2469(15 downto 0) <= rhs_V_9_cast_fu_886_p1(15 downto 0);
                    tmp_10_reg_2426(4 downto 0) <= tmp_10_fu_859_p1(4 downto 0);
                    tmp_11_cast_reg_2396(27 downto 0) <= tmp_11_cast_fu_824_p1(27 downto 0);
                    tmp_18_reg_2447(7 downto 0) <= tmp_18_fu_874_p1(7 downto 0);
                    tmp_19_reg_2453(7 downto 0) <= tmp_19_fu_877_p1(7 downto 0);
                    tmp_20_reg_2489(13 downto 0) <= tmp_20_fu_898_p1(13 downto 0);
                    tmp_6_cast_reg_2391(27 downto 0) <= tmp_6_cast_fu_821_p1(27 downto 0);
                    tmp_7_reg_2411(7 downto 0) <= tmp_7_fu_850_p1(7 downto 0);
                    tmp_cast_reg_2386(27 downto 0) <= tmp_cast_fu_818_p1(27 downto 0);
                    tmp_s_reg_2406(7 downto 0) <= tmp_s_fu_847_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_1221_p2 = ap_const_lv1_0))) then
                brmerge1_mid2_reg_2650 <= brmerge1_mid2_fu_1464_p3;
                i_op_assign_mid2_reg_2645 <= i_op_assign_mid2_fu_1391_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                brmerge1_mid2_reg_2650_pp0_iter1_reg <= brmerge1_mid2_reg_2650;
                brmerge1_mid2_reg_2650_pp0_iter2_reg <= brmerge1_mid2_reg_2650_pp0_iter1_reg;
                brmerge1_mid2_reg_2650_pp0_iter3_reg <= brmerge1_mid2_reg_2650_pp0_iter2_reg;
                brmerge1_mid2_reg_2650_pp0_iter4_reg <= brmerge1_mid2_reg_2650_pp0_iter3_reg;
                exitcond_flatten3_reg_2631 <= exitcond_flatten3_fu_1221_p2;
                exitcond_flatten3_reg_2631_pp0_iter1_reg <= exitcond_flatten3_reg_2631;
                exitcond_flatten3_reg_2631_pp0_iter2_reg <= exitcond_flatten3_reg_2631_pp0_iter1_reg;
                exitcond_flatten3_reg_2631_pp0_iter3_reg <= exitcond_flatten3_reg_2631_pp0_iter2_reg;
                exitcond_flatten3_reg_2631_pp0_iter4_reg <= exitcond_flatten3_reg_2631_pp0_iter3_reg;
                exitcond_flatten3_reg_2631_pp0_iter5_reg <= exitcond_flatten3_reg_2631_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then
                cin_reg_2680 <= cin_fu_1581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dat_V_reg_2691 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_flatten2_fu_941_p2 = ap_const_lv1_0))) then
                exitcond2_mid1_reg_2566 <= exitcond2_mid1_fu_1023_p3;
                exitcond_flatten_reg_2538 <= exitcond_flatten_fu_952_p2;
                i_op_assign_8_mid2_reg_2573 <= i_op_assign_8_mid2_fu_1036_p3;
                r_V_13_mid2_reg_2561 <= r_V_13_mid2_fu_1013_p2;
                r_V_4_mid2_reg_2551 <= r_V_4_mid2_fu_988_p2;
                r_V_4_mid2_v_v_v_v_v_reg_2546 <= r_V_4_mid2_v_v_v_v_v_fu_963_p3;
                tmp_24_reg_2556 <= tmp_24_fu_993_p1;
                tmp_29_reg_2579 <= grp_fu_2138_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                feature_out_V6_sum_reg_2781 <= feature_out_V6_sum_fu_1871_p2;
                indvar_flatten_next1_reg_2791 <= indvar_flatten_next1_fu_1887_p3;
                j_reg_2786 <= j_fu_1876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                gmem_addr_reg_2796 <= feature_out_V6_sum_c_fu_1894_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_1221_p2 = ap_const_lv1_0))) then
                i_op_assign_9_mid2_reg_2654 <= i_op_assign_9_mid2_fu_1490_p3;
                indvar_flatten_next_reg_2669 <= indvar_flatten_next_fu_1563_p3;
                tmp4_mid2_v_v_v_v_v_s_reg_2640 <= tmp4_mid2_v_v_v_v_v_s_fu_1301_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                indvar_flatten_next2_reg_2533 <= indvar_flatten_next2_fu_946_p2;
                r_V_8_reg_2525 <= r_V_8_fu_2121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next3_reg_2635 <= indvar_flatten_next3_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_2631_pp0_iter4_reg = ap_const_lv1_0))) then
                p_Result_5_2_reg_2716 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(47 downto 32);
                p_Result_5_3_reg_2726 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(63 downto 48);
                p_Result_5_4_reg_2736 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(79 downto 64);
                p_Result_5_5_reg_2746 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(95 downto 80);
                p_Result_5_6_reg_2756 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(111 downto 96);
                p_Result_5_7_reg_2766 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(127 downto 112);
                p_Result_6_2_reg_2721 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(47 downto 32);
                p_Result_6_3_reg_2731 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(63 downto 48);
                p_Result_6_4_reg_2741 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(79 downto 64);
                p_Result_6_5_reg_2751 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(95 downto 80);
                p_Result_6_6_reg_2761 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(111 downto 96);
                p_Result_6_7_reg_2771 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(127 downto 112);
                r_V_29_1_reg_2711 <= r_V_29_1_fu_2207_p2;
                tmp_65_reg_2701 <= tmp_65_fu_1596_p1;
                tmp_66_reg_2706 <= tmp_66_fu_1600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                p_Result_s_reg_2808 <= p_Result_s_fu_2095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                p_Val2_s_reg_2803 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                wt_V_reg_2696 <= gmem_RDATA;
            end if;
        end if;
    end process;
    lhs_V_5_cast_reg_2353(16) <= '0';
    lhs_V_7_cast_reg_2370(16) <= '0';
    tmp_cast_reg_2386(45 downto 28) <= "000000000000000000";
    tmp_6_cast_reg_2391(45 downto 28) <= "000000000000000000";
    tmp_11_cast_reg_2396(46 downto 28) <= "0000000000000000000";
    tmp_s_reg_2406(15 downto 8) <= "00000000";
    tmp_7_reg_2411(15 downto 8) <= "00000000";
    rhs_V_12_cast1_cast_reg_2416(21 downto 14) <= "00000000";
    rhs_V_12_cast_cast_reg_2421(29 downto 14) <= "0000000000000000";
    tmp_10_reg_2426(39 downto 5) <= "00000000000000000000000000000000000";
    rhs_V_2_cast1_reg_2431(31 downto 16) <= "0000000000000000";
    rhs_V_2_cast_cast_reg_2437(28 downto 16) <= "0000000000000";
    rhs_V_5_cast_reg_2442(44 downto 16) <= "00000000000000000000000000000";
    tmp_18_reg_2447(15 downto 8) <= "00000000";
    tmp_19_reg_2453(15 downto 8) <= "00000000";
    rhs_V_1_reg_2458(31 downto 16) <= "0000000000000000";
    rhs_V_8_cast_reg_2464(29 downto 16) <= "00000000000000";
    rhs_V_9_cast_reg_2469(44 downto 16) <= "00000000000000000000000000000";
    rhs_V_10_cast1_cast_reg_2474(29 downto 8) <= "0000000000000000000000";
    rhs_V_10_cast_cast_reg_2479(37 downto 8) <= "000000000000000000000000000000";
    rhs_V_11_cast_reg_2484(44 downto 8) <= "0000000000000000000000000000000000000";
    tmp_20_reg_2489(20 downto 14) <= "0000000";
    Lo_assign_cast_mid2_s_reg_2588(3 downto 0) <= "0000";
    Hi_assign_cast_mid2_s_reg_2594(3 downto 0) <= "1111";
    i_op_assign_10_cast_reg_2616(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state39, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state53, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state24, exitcond_flatten2_fu_941_p2, exitcond_flatten3_fu_1221_p2, ap_sig_ioackin_gmem_ARREADY, ap_enable_reg_pp0_iter5, ap_sig_ioackin_gmem_AWREADY, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((exitcond_flatten2_fu_941_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten3_fu_1221_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten3_fu_1221_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_cast_mid2_s_fu_1058_p2 <= (ap_const_lv7_F or Lo_assign_cast_mid2_s_fu_1051_p3);
    Hout_V_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_17_fu_837_p1));
    Lo_assign_cast_mid2_s_fu_1051_p3 <= (tmp_24_reg_2556 & ap_const_lv4_0);
    W_V4_sum_cast_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W_V4_sum_reg_2664),64));
    W_V4_sum_fu_1552_p2 <= std_logic_vector(unsigned(tmp_51_cast_cast_fu_1548_p1) + unsigned(tmp_6_cast_reg_2391));
    Wout_V_fu_831_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_15_fu_827_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(26);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state38 <= ap_CS_fsm(27);
    ap_CS_fsm_state39 <= ap_CS_fsm(28);
    ap_CS_fsm_state46 <= ap_CS_fsm(35);
    ap_CS_fsm_state47 <= ap_CS_fsm(36);
    ap_CS_fsm_state48 <= ap_CS_fsm(37);
    ap_CS_fsm_state53 <= ap_CS_fsm(42);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, gmem_RVALID, ap_predicate_op405_read_state34)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, gmem_RVALID, ap_block_state28_io, ap_predicate_op405_read_state34)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, gmem_RVALID, ap_block_state28_io, ap_predicate_op405_read_state34)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter4, gmem_RVALID, ap_predicate_op407_read_state35)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, gmem_RVALID, ap_block_state27_io, ap_predicate_op407_read_state35)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, gmem_RVALID, ap_block_state27_io, ap_predicate_op407_read_state35)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state26_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(ap_sig_ioackin_gmem_ARREADY, ap_predicate_op389_readreq_state27)
    begin
                ap_block_state27_io <= ((ap_predicate_op389_readreq_state27 = ap_const_boolean_1) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state27_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(ap_sig_ioackin_gmem_ARREADY, ap_predicate_op394_readreq_state28)
    begin
                ap_block_state28_io <= ((ap_predicate_op394_readreq_state28 = ap_const_boolean_1) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state28_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_pp0_stage0_iter4_assign_proc : process(gmem_RVALID, ap_predicate_op405_read_state34)
    begin
                ap_block_state34_pp0_stage0_iter4 <= ((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state35_pp0_stage1_iter4_assign_proc : process(gmem_RVALID, ap_predicate_op407_read_state35)
    begin
                ap_block_state35_pp0_stage1_iter4 <= ((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state36_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_752_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_predicate_op389_readreq_state27, ap_block_pp0_stage1_01001)
    begin
                ap_condition_752 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_predicate_op389_readreq_state27 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_766_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op394_readreq_state28, ap_block_pp0_stage0_01001)
    begin
                ap_condition_766 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op394_readreq_state28 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state26_assign_proc : process(exitcond_flatten3_fu_1221_p2)
    begin
        if ((exitcond_flatten3_fu_1221_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24, exitcond_flatten2_fu_941_p2)
    begin
        if (((exitcond_flatten2_fu_941_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_7_phi_fu_438_p4_assign_proc : process(exitcond_flatten3_reg_2631, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, i_op_assign_7_reg_434, tmp4_mid2_v_v_v_v_v_s_reg_2640)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
            ap_phi_mux_i_op_assign_7_phi_fu_438_p4 <= tmp4_mid2_v_v_v_v_v_s_reg_2640;
        else 
            ap_phi_mux_i_op_assign_7_phi_fu_438_p4 <= i_op_assign_7_reg_434;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_9_phi_fu_460_p4_assign_proc : process(exitcond_flatten3_reg_2631, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, i_op_assign_9_reg_456, i_op_assign_9_mid2_reg_2654)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
            ap_phi_mux_i_op_assign_9_phi_fu_460_p4 <= i_op_assign_9_mid2_reg_2654;
        else 
            ap_phi_mux_i_op_assign_9_phi_fu_460_p4 <= i_op_assign_9_reg_456;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_483_p4_assign_proc : process(exitcond_flatten3_reg_2631, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, i_op_assign_reg_479, cin_reg_2680)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
            ap_phi_mux_i_op_assign_phi_fu_483_p4 <= cin_reg_2680;
        else 
            ap_phi_mux_i_op_assign_phi_fu_483_p4 <= i_op_assign_reg_479;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten3_phi_fu_427_p4_assign_proc : process(exitcond_flatten3_reg_2631, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten3_reg_423, indvar_flatten_next3_reg_2635)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten3_phi_fu_427_p4 <= indvar_flatten_next3_reg_2635;
        else 
            ap_phi_mux_indvar_flatten3_phi_fu_427_p4 <= indvar_flatten3_reg_423;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_449_p4_assign_proc : process(exitcond_flatten3_reg_2631, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_reg_445, indvar_flatten_next_reg_2669)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_449_p4 <= indvar_flatten_next_reg_2669;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_449_p4 <= indvar_flatten_reg_445;
        end if; 
    end process;


    ap_phi_mux_p_Val2_1_phi_fu_505_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, exitcond_flatten3_reg_2631_pp0_iter4_reg, brmerge1_mid2_reg_2650_pp0_iter4_reg, dat_V_reg_2691, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (brmerge1_mid2_reg_2650_pp0_iter4_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_Val2_1_phi_fu_505_p4 <= dat_V_reg_2691;
        else 
            ap_phi_mux_p_Val2_1_phi_fu_505_p4 <= ap_const_lv128_lc_1;
        end if; 
    end process;


    ap_phi_mux_p_Val2_2_phi_fu_494_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, exitcond_flatten3_reg_2631_pp0_iter4_reg, brmerge1_mid2_reg_2650_pp0_iter4_reg, wt_V_reg_2696, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (brmerge1_mid2_reg_2650_pp0_iter4_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_Val2_2_phi_fu_494_p4 <= wt_V_reg_2696;
        else 
            ap_phi_mux_p_Val2_2_phi_fu_494_p4 <= ap_const_lv128_lc_1;
        end if; 
    end process;


    ap_predicate_op389_readreq_state27_assign_proc : process(exitcond_flatten3_reg_2631, brmerge1_mid2_reg_2650)
    begin
                ap_predicate_op389_readreq_state27 <= ((brmerge1_mid2_reg_2650 = ap_const_lv1_0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0));
    end process;


    ap_predicate_op394_readreq_state28_assign_proc : process(exitcond_flatten3_reg_2631, brmerge1_mid2_reg_2650)
    begin
                ap_predicate_op394_readreq_state28 <= ((brmerge1_mid2_reg_2650 = ap_const_lv1_0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0));
    end process;


    ap_predicate_op405_read_state34_assign_proc : process(exitcond_flatten3_reg_2631_pp0_iter3_reg, brmerge1_mid2_reg_2650_pp0_iter3_reg)
    begin
                ap_predicate_op405_read_state34 <= ((brmerge1_mid2_reg_2650_pp0_iter3_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op407_read_state35_assign_proc : process(exitcond_flatten3_reg_2631_pp0_iter4_reg, brmerge1_mid2_reg_2650_pp0_iter4_reg)
    begin
                ap_predicate_op407_read_state35 <= ((brmerge1_mid2_reg_2650_pp0_iter4_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, exitcond_flatten2_fu_941_p2)
    begin
        if (((exitcond_flatten2_fu_941_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound1_fu_2114_p0 <= bound1_fu_2114_p00(16 - 1 downto 0);
    bound1_fu_2114_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hout_V_fu_841_p2),32));
    bound1_fu_2114_p1 <= bound1_fu_2114_p10(16 - 1 downto 0);
    bound1_fu_2114_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_831_p2),32));
    bound2_fu_920_p0 <= bound2_fu_920_p00(16 - 1 downto 0);
    bound2_fu_920_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_V_read_reg_2298),48));
    bound2_fu_920_p1 <= bound2_fu_920_p10(32 - 1 downto 0);
    bound2_fu_920_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound1_fu_2114_p2),48));
    bound2_fu_920_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound2_fu_920_p0) * unsigned(bound2_fu_920_p1), 48));
    bound4_fu_2108_p0 <= bound4_fu_2108_p00(8 - 1 downto 0);
    bound4_fu_2108_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_2285),30));
    bound4_fu_2108_p1 <= bound4_fu_2108_p10(22 - 1 downto 0);
    bound4_fu_2108_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_2101_p2),30));
    bound_fu_2101_p0 <= bound_fu_2101_p00(8 - 1 downto 0);
    bound_fu_2101_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_2291),22));
    bound_fu_2101_p1 <= bound_fu_2101_p10(14 - 1 downto 0);
    bound_fu_2101_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_div_K_V_reg_2329),22));
    brmerge1_fu_1210_p2 <= (tmp_34_fu_1185_p3 or tmp2_fu_1204_p2);
    brmerge1_mid1_fu_1458_p2 <= (tmp_64_fu_1433_p3 or tmp2_mid1_fu_1452_p2);
    brmerge1_mid2_fu_1464_p3 <= 
        brmerge1_mid1_fu_1458_p2 when (exitcond3_mid1_fu_1372_p3(0) = '1') else 
        brmerge1_mid3_fu_1347_p3;
    brmerge1_mid3_fu_1347_p3 <= 
        brmerge1_mid_fu_1341_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        brmerge1_fu_1210_p2;
    brmerge1_mid_fu_1341_p2 <= (tmp_63_fu_1328_p3 or tmp2_mid_fu_1336_p2);
    cin_fu_1581_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(i_op_assign_mid2_reg_2645));
    cout_fu_957_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(i_op_assign_s_reg_377));
    exitcond1_fu_1367_p2 <= "1" when (ap_phi_mux_i_op_assign_phi_fu_483_p4 = CHin_div_K_V_reg_2329) else "0";
    exitcond2_mid1_fu_1023_p3 <= 
        exitcond2_mid_reg_2515 when (exitcond_flatten_fu_952_p2(0) = '1') else 
        exitcond_fu_1018_p2;
    exitcond2_mid_fu_926_p2 <= "1" when (Wout_V_fu_831_p2 = ap_const_lv16_0) else "0";
    exitcond3_mid1_fu_1372_p3 <= 
        exitcond3_mid_reg_2520 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        exitcond1_fu_1367_p2;
    exitcond3_mid_fu_932_p2 <= "1" when (CHin_div_K_V_reg_2329 = ap_const_lv14_0) else "0";
    exitcond_flatten1_fu_1232_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_449_p4 = bound_reg_2495) else "0";
    exitcond_flatten2_fu_941_p2 <= "1" when (indvar_flatten1_reg_366 = bound2_reg_2510) else "0";
    exitcond_flatten3_fu_1221_p2 <= "1" when (ap_phi_mux_indvar_flatten3_phi_fu_427_p4 = bound4_reg_2500) else "0";
    exitcond_flatten_fu_952_p2 <= "1" when (indvar_flatten2_reg_388 = bound1_reg_2505) else "0";
    exitcond_fu_1018_p2 <= "1" when (i_op_assign_8_reg_412 = Wout_V_reg_2401) else "0";
        feature_in_V2_sum_ca_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in_V2_sum_reg_2659),64));

    feature_in_V2_sum_fu_1524_p2 <= std_logic_vector(signed(tmp_46_cast_cast_fu_1520_p1) + signed(tmp_11_cast_reg_2396));
    feature_out_V6_sum_c_fu_1894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_out_V6_sum_reg_2781),64));
    feature_out_V6_sum_fu_1871_p2 <= std_logic_vector(unsigned(tmp_40_cast_cast_fu_1867_p1) + unsigned(tmp_cast_reg_2386));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state39, feature_in_V2_sum_ca_fu_1571_p1, W_V4_sum_cast_fu_1586_p1, feature_out_V6_sum_c_fu_1894_p1, ap_reg_ioackin_gmem_ARREADY, ap_condition_752, ap_condition_766)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                gmem_ARADDR <= feature_out_V6_sum_c_fu_1894_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_766)) then 
                gmem_ARADDR <= W_V4_sum_cast_fu_1586_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_752)) then 
                gmem_ARADDR <= feature_in_V2_sum_ca_fu_1571_p1(32 - 1 downto 0);
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state39, ap_predicate_op394_readreq_state28, ap_predicate_op389_readreq_state27, ap_reg_ioackin_gmem_ARREADY, ap_block_pp0_stage1_01001, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op394_readreq_state28 = ap_const_boolean_1) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_predicate_op389_readreq_state27 = ap_const_boolean_1) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state47, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state53, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_state46, gmem_RVALID, ap_predicate_op405_read_state34, ap_block_pp0_stage0_11001, ap_predicate_op407_read_state35, ap_block_pp0_stage1_11001)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_predicate_op405_read_state34 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_predicate_op407_read_state35 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state48, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten3_reg_2631, brmerge1_mid2_reg_2650, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (brmerge1_mid2_reg_2650 = ap_const_lv1_0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (brmerge1_mid2_reg_2650 = ap_const_lv1_0) and (exitcond_flatten3_reg_2631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, exitcond_flatten3_reg_2631_pp0_iter3_reg, brmerge1_mid2_reg_2650_pp0_iter3_reg, exitcond_flatten3_reg_2631_pp0_iter4_reg, brmerge1_mid2_reg_2650_pp0_iter4_reg, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (brmerge1_mid2_reg_2650_pp0_iter3_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (brmerge1_mid2_reg_2650_pp0_iter4_reg = ap_const_lv1_0) and (exitcond_flatten3_reg_2631_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_2138_p0 <= tmp_19_reg_2453(8 - 1 downto 0);
    grp_fu_2138_p1 <= 
        ap_const_lv16_0 when (tmp_26_fu_1030_p2(0) = '1') else 
        i_op_assign_8_reg_412;
    grp_fu_2138_p2 <= tmp_7_reg_2411(8 - 1 downto 0);
    grp_fu_2188_p0 <= grp_fu_2188_p00(22 - 1 downto 0);
    grp_fu_2188_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_mid2_v_v_v_v_fu_2182_p2),30));
    grp_fu_2188_p1 <= rhs_V_10_cast1_cast_reg_2474(8 - 1 downto 0);

    grp_fu_762_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_762_ap_start <= ap_const_logic_1;
        else 
            grp_fu_762_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_762_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_748_p2),19));

    grp_fu_762_p1 <= grp_fu_762_p10(9 - 1 downto 0);
    grp_fu_762_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V),19));

    grp_fu_812_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_812_ap_start <= ap_const_logic_1;
        else 
            grp_fu_812_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_812_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_798_p2),19));

    grp_fu_812_p1 <= grp_fu_812_p10(9 - 1 downto 0);
    grp_fu_812_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V),19));
    h_V_fu_1134_p2 <= std_logic_vector(unsigned(tmp_21_fu_1130_p1) + unsigned(tmp_28_mid2_reg_2605));
    h_V_mid1_fu_1255_p2 <= std_logic_vector(unsigned(tmp_21_mid1_fu_1251_p1) + unsigned(tmp_28_mid2_reg_2605));
    h_V_mid2_fu_1260_p3 <= 
        h_V_mid1_fu_1255_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        h_V_fu_1134_p2;
    i_fu_1076_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(i_op_assign_6_mid_fu_1044_p3));
    i_op_assign_10_cast_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_8_mid2_reg_2573),32));
    i_op_assign_6_mid2_fu_1103_p3 <= 
        i_fu_1076_p2 when (exitcond2_mid1_reg_2566(0) = '1') else 
        i_op_assign_6_mid_fu_1044_p3;
    i_op_assign_6_mid_fu_1044_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten_reg_2538(0) = '1') else 
        i_op_assign_6_reg_400;
    i_op_assign_8_mid2_fu_1036_p3 <= 
        ap_const_lv16_0 when (tmp_26_fu_1030_p2(0) = '1') else 
        i_op_assign_8_reg_412;
    i_op_assign_9_mid2_fu_1490_p3 <= 
        jj_fu_1379_p2 when (exitcond3_mid1_fu_1372_p3(0) = '1') else 
        i_op_assign_9_mid_fu_1237_p3;
    i_op_assign_9_mid_fu_1237_p3 <= 
        ap_const_lv8_0 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        ap_phi_mux_i_op_assign_9_phi_fu_460_p4;
    i_op_assign_mid2_fu_1391_p3 <= 
        ap_const_lv14_0 when (tmp_36_fu_1385_p2(0) = '1') else 
        ap_phi_mux_i_op_assign_phi_fu_483_p4;
    icmp_fu_1940_p2 <= "1" when (signed(tmp_42_fu_1930_p4) > signed(ap_const_lv25_0)) else "0";
    ii8_fu_1245_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_7_phi_fu_438_p4) + unsigned(ap_const_lv8_1));
    indvar_flatten47_op_fu_1881_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_388) + unsigned(ap_const_lv32_1));
    indvar_flatten_next1_fu_1887_p3 <= 
        ap_const_lv32_1 when (exitcond_flatten_reg_2538(0) = '1') else 
        indvar_flatten47_op_fu_1881_p2;
    indvar_flatten_next2_fu_946_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_366) + unsigned(ap_const_lv48_1));
    indvar_flatten_next3_fu_1226_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten3_phi_fu_427_p4) + unsigned(ap_const_lv30_1));
    indvar_flatten_next_fu_1563_p3 <= 
        ap_const_lv22_1 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        indvar_flatten_op_fu_1557_p2;
    indvar_flatten_op_fu_1557_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_449_p4));
    j_fu_1876_p2 <= std_logic_vector(signed(i_op_assign_8_mid2_reg_2573) + signed(ap_const_lv16_1));
    jj_fu_1379_p2 <= std_logic_vector(unsigned(i_op_assign_9_mid_fu_1237_p3) + unsigned(ap_const_lv8_1));
        lhs_V_10_cast_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_fu_1134_p2),17));

        lhs_V_10_cast_mid1_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_mid1_fu_1255_p2),17));

    lhs_V_5_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V),17));
    lhs_V_7_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_V),17));
    lhs_V_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V),17));
    lhs_V_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_in_precision_V),5));
        loc_V_fu_1974_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0247_1_fu_1966_p3),128));

    out_truncate_V_fu_580_p2 <= std_logic_vector(unsigned(r_V_fu_574_p2) - unsigned(tmp_3_fu_570_p1));
    p_0247_1_fu_1966_p3 <= 
        p_cast_35_fu_1952_p3 when (tmp_32_fu_1960_p2(0) = '1') else 
        r_V_13_fu_1925_p2;
    p_1_fu_702_p3 <= 
        pad_x_V_fu_636_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_2_fu_710_p3 <= 
        pad_y_V_fu_694_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_Result_5_1_fu_1604_p4 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(31 downto 16);
    p_Result_6_1_fu_1614_p4 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(31 downto 16);
    p_Result_s_fu_2095_p2 <= (tmp_61_fu_2089_p2 or tmp_60_fu_2084_p2);
    p_cast_35_fu_1952_p3 <= 
        ap_const_lv40_7FFF when (icmp_fu_1940_p2(0) = '1') else 
        ap_const_lv40_FFFFFF8000;
        p_cast_fu_1844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_fu_1838_p2),40));

    p_demorgan_fu_2072_p2 <= (tmp_58_fu_2066_p2 and tmp_57_fu_2060_p2);
    p_neg1_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_13_cast_fu_586_p1));
    p_neg2_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_24_cast_fu_644_p1));
    p_s_fu_1917_p3 <= 
        ap_const_lv40_0 when (r_V_3_fu_1912_p2(0) = '1') else 
        p_0807_2_reg_467;
    pad_x_V_fu_636_p3 <= 
        tmp_9_fu_630_p2 when (tmp_5_fu_596_p3(0) = '1') else 
        tmp_8_fu_620_p4;
    pad_y_V_fu_694_p3 <= 
        tmp_13_fu_688_p2 when (tmp_6_fu_654_p3(0) = '1') else 
        tmp_12_fu_678_p4;
    r_V_10_fu_2201_p0 <= rhs_V_8_cast_reg_2464(16 - 1 downto 0);
    r_V_10_fu_2201_p1 <= r_V_10_fu_2201_p10(14 - 1 downto 0);
    r_V_10_fu_2201_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_mid2_fu_1391_p3),30));
    r_V_11_fu_1505_p0 <= rhs_V_9_cast_reg_2469(16 - 1 downto 0);
    r_V_11_fu_1505_p1 <= r_V_11_fu_1505_p10(30 - 1 downto 0);
    r_V_11_fu_1505_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_10_fu_2201_p2),45));
    r_V_11_fu_1505_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_1505_p0) * unsigned(r_V_11_fu_1505_p1), 45));
    r_V_13_fu_1925_p2 <= std_logic_vector(shift_right(signed(p_s_fu_1917_p3),to_integer(unsigned('0' & tmp_10_reg_2426(31-1 downto 0)))));
    r_V_13_mid2_fu_1013_p0 <= rhs_V_11_cast_reg_2484(8 - 1 downto 0);
    r_V_13_mid2_fu_1013_p1 <= r_V_13_mid2_fu_1013_p10(38 - 1 downto 0);
    r_V_13_mid2_fu_1013_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_mid2_v_v_fu_1004_p2),45));
    r_V_13_mid2_fu_1013_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_mid2_fu_1013_p0) * unsigned(r_V_13_mid2_fu_1013_p1), 45));
    r_V_13_mid2_v_v_fu_1004_p0 <= rhs_V_10_cast_cast_reg_2479(8 - 1 downto 0);
    r_V_13_mid2_v_v_fu_1004_p1 <= r_V_13_mid2_v_v_fu_1004_p10(30 - 1 downto 0);
    r_V_13_mid2_v_v_fu_1004_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_mid2_v_v_v_v_fu_2132_p2),38));
    r_V_13_mid2_v_v_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_mid2_v_v_fu_1004_p0) * unsigned(r_V_13_mid2_v_v_fu_1004_p1), 38));
    r_V_13_mid2_v_v_v_v_fu_2132_p0 <= rhs_V_12_cast_cast_reg_2421(14 - 1 downto 0);
    r_V_13_mid2_v_v_v_v_fu_2132_p1 <= r_V_13_mid2_v_v_v_v_fu_2132_p10(16 - 1 downto 0);
    r_V_13_mid2_v_v_v_v_fu_2132_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_mid2_v_v_v_v_v_fu_963_p3),30));
    r_V_15_cast_fu_1510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_1505_p2),46));
    r_V_16_mid1_fu_2175_p1 <= rhs_V_1_reg_2458(16 - 1 downto 0);
    r_V_16_mid2_fu_1276_p3 <= 
        r_V_16_mid1_fu_2175_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        r_V_2_fu_2162_p2;
    r_V_1_fu_798_p2 <= std_logic_vector(unsigned(r_V_cast_fu_790_p1) - unsigned(rhs_V_6_cast_fu_794_p1));
    r_V_1_tr_fu_546_p2 <= std_logic_vector(unsigned(ap_const_lv17_7) + unsigned(lhs_V_cast_fu_542_p1));
    r_V_2_fu_2162_p1 <= rhs_V_1_reg_2458(16 - 1 downto 0);
    r_V_3_fu_1912_p2 <= (tmp_41_fu_1904_p3 and relu_en_V_read_reg_2270);
    r_V_3_tr_fu_590_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_13_cast_fu_586_p1));
    r_V_4_mid2_fu_988_p0 <= rhs_V_5_cast_reg_2442(16 - 1 downto 0);
    r_V_4_mid2_fu_988_p1 <= r_V_4_mid2_fu_988_p10(29 - 1 downto 0);
    r_V_4_mid2_fu_988_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_mid2_v_v_fu_2126_p2),45));
    r_V_4_mid2_fu_988_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_mid2_fu_988_p0) * unsigned(r_V_4_mid2_fu_988_p1), 45));
    r_V_4_mid2_v_v_fu_2126_p0 <= rhs_V_2_cast_cast_reg_2437(16 - 1 downto 0);
    r_V_4_mid2_v_v_fu_2126_p1 <= r_V_4_mid2_v_v_fu_2126_p10(13 - 1 downto 0);
    r_V_4_mid2_v_v_fu_2126_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_971_p4),29));
    r_V_4_mid2_v_v_v_v_v_fu_963_p3 <= 
        cout_fu_957_p2 when (exitcond_flatten_fu_952_p2(0) = '1') else 
        i_op_assign_s_reg_377;
    r_V_4_tr_fu_648_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_24_cast_fu_644_p1));
    r_V_5_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_718_p3),17));
    r_V_5_fu_718_p3 <= (p_1_fu_702_p3 & ap_const_lv1_0);
    r_V_6_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_734_p2),18));
    r_V_6_fu_734_p2 <= std_logic_vector(unsigned(lhs_V_5_cast_fu_730_p1) + unsigned(r_V_5_cast_fu_726_p1));
    r_V_7_fu_748_p2 <= std_logic_vector(unsigned(r_V_6_cast_fu_740_p1) - unsigned(rhs_V_3_cast_fu_744_p1));
    r_V_8_fu_2121_p0 <= r_V_8_fu_2121_p00(16 - 1 downto 0);
    r_V_8_fu_2121_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_6_reg_400),32));
    r_V_8_fu_2121_p1 <= rhs_V_2_cast1_reg_2431(16 - 1 downto 0);
    r_V_8_mid1_fu_2150_p0 <= rhs_V_2_cast1_reg_2431(16 - 1 downto 0);
    r_V_8_mid1_fu_2150_p1 <= r_V_8_mid1_fu_2150_p10(16 - 1 downto 0);
    r_V_8_mid1_fu_2150_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_1076_p2),32));
    r_V_8_mid2_fu_1086_p3 <= 
        r_V_8_mid1_fu_2150_p2 when (exitcond2_mid1_reg_2566(0) = '1') else 
        r_V_8_mid_fu_1064_p3;
    r_V_8_mid_fu_1064_p3 <= 
        ap_const_lv32_0 when (exitcond_flatten_reg_2538(0) = '1') else 
        r_V_8_reg_2525;
    r_V_9_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_fu_768_p3),17));
    r_V_9_fu_768_p3 <= (p_2_fu_710_p3 & ap_const_lv1_0);
    r_V_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_s_fu_784_p2),18));
    r_V_fu_574_p2 <= std_logic_vector(unsigned(rhs_V_fu_566_p1) + unsigned(lhs_V_fu_562_p1));
    r_V_s_fu_784_p2 <= std_logic_vector(unsigned(lhs_V_7_cast_fu_780_p1) + unsigned(r_V_9_cast_fu_776_p1));
    rev1_fu_1152_p2 <= (slt_fu_1147_p2 xor ap_const_lv1_1);
    rev2_fu_1198_p2 <= (slt2_fu_1193_p2 xor ap_const_lv1_1);
    rev3_fu_1287_p2 <= (slt3_fu_1282_p2 xor ap_const_lv1_1);
    rev4_fu_1446_p2 <= (slt4_fu_1441_p2 xor ap_const_lv1_1);
    rev_fu_1124_p2 <= (slt1_fu_1119_p2 xor ap_const_lv1_1);
    rhs_V_10_cast1_cast_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_2291),30));
    rhs_V_10_cast_cast_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_2291),38));
    rhs_V_11_cast_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_2285),45));
    rhs_V_12_cast1_cast_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_div_K_V_reg_2329),22));
    rhs_V_12_cast_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_div_K_V_reg_2329),30));
    rhs_V_1_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_2303),32));
    rhs_V_2_cast1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_831_p2),32));
    rhs_V_2_cast_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_831_p2),29));
    rhs_V_3_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),18));
    rhs_V_5_cast_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hout_V_fu_841_p2),45));
    rhs_V_6_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),18));
    rhs_V_8_cast_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_V_read_reg_2309),30));
    rhs_V_9_cast_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_2303),45));
    rhs_V_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W_precision_V),5));
    slt1_fu_1119_p2 <= "1" when (signed(tmp_36_cast_mid_fu_1113_p1) < signed(lhs_V_5_cast_reg_2353)) else "0";
    slt2_fu_1193_p2 <= "1" when (signed(tmp_36_cast_fu_1173_p1) < signed(lhs_V_5_cast_reg_2353)) else "0";
    slt3_fu_1282_p2 <= "1" when (signed(lhs_V_10_cast_mid1_fu_1272_p1) < signed(lhs_V_7_cast_reg_2370)) else "0";
    slt4_fu_1441_p2 <= "1" when (signed(tmp_36_cast_mid1_fu_1414_p1) < signed(lhs_V_5_cast_reg_2353)) else "0";
    slt_fu_1147_p2 <= "1" when (signed(lhs_V_10_cast_fu_1143_p1) < signed(lhs_V_7_cast_reg_2370)) else "0";
    sum_V_7_fu_1848_p2 <= std_logic_vector(signed(p_cast_fu_1844_p1) + signed(p_0807_2_reg_467));
        tmp10_cast_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2238_p3),34));

        tmp11_cast_fu_1825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2254_p3),34));

    tmp12_cast_fu_1858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_fu_1854_p2),45));
    tmp12_fu_1854_p2 <= std_logic_vector(unsigned(r_V_8_mid2_reg_2600) + unsigned(i_op_assign_10_cast_reg_2616));
    tmp2_fu_1204_p2 <= (rev2_fu_1198_p2 or rev1_fu_1152_p2);
    tmp2_mid1_fu_1452_p2 <= (tmp_42_not_mid2_fu_1293_p3 or rev4_fu_1446_p2);
    tmp2_mid_fu_1336_p2 <= (rev_reg_2626 or rev3_fu_1287_p2);
    tmp3_cast_mid236_v_fu_1359_p3 <= 
        tmp3_mid_fu_1355_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        tmp3_fu_1216_p2;
        tmp3_cast_mid2_fu_1486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_cast_mid2_v_fu_1478_p3),46));

    tmp3_cast_mid2_v_fu_1478_p3 <= 
        tmp3_mid1_fu_1472_p2 when (exitcond3_mid1_fu_1372_p3(0) = '1') else 
        tmp3_cast_mid236_v_fu_1359_p3;
    tmp3_fu_1216_p2 <= std_logic_vector(signed(r_V_2_fu_2162_p2) + signed(tmp_37_cast_fu_1177_p1));
    tmp3_mid1_fu_1472_p2 <= std_logic_vector(unsigned(r_V_16_mid2_fu_1276_p3) + unsigned(tmp_37_cast_mid1_fu_1418_p1));
    tmp3_mid_fu_1355_p2 <= std_logic_vector(signed(r_V_16_mid1_fu_2175_p2) + signed(tmp_37_cast_mid_reg_2621));
    tmp4_mid2_v_v_v_v_fu_2182_p0 <= tmp4_mid2_v_v_v_v_fu_2182_p00(8 - 1 downto 0);
    tmp4_mid2_v_v_v_v_fu_2182_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_mid2_v_v_v_v_v_s_fu_1301_p3),22));
    tmp4_mid2_v_v_v_v_fu_2182_p1 <= rhs_V_12_cast1_cast_reg_2416(14 - 1 downto 0);
    tmp4_mid2_v_v_v_v_v_s_fu_1301_p3 <= 
        ii8_fu_1245_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        ap_phi_mux_i_op_assign_7_phi_fu_438_p4;
    tmp5_cast_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_1533_p2),45));
    tmp5_fu_1533_p2 <= std_logic_vector(unsigned(tmp_48_cast_fu_1529_p1) + unsigned(tmp_38_cast_mid2_fu_1426_p3));
        tmp6_cast_fu_1818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1812_p2),35));

    tmp6_fu_1812_p2 <= std_logic_vector(signed(tmp7_cast_fu_1806_p1) + signed(tmp8_cast_fu_1809_p1));
        tmp7_cast_fu_1806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2213_p3),34));

        tmp8_cast_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2222_p3),34));

        tmp9_cast_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_1828_p2),35));

    tmp9_fu_1828_p2 <= std_logic_vector(signed(tmp10_cast_fu_1822_p1) + signed(tmp11_cast_fu_1825_p1));
    tmp_10_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_truncate_V_reg_2338),40));
    tmp_11_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_2324),47));
    tmp_11_fu_668_p4 <= p_neg2_fu_662_p2(8 downto 1);
    tmp_12_fu_678_p4 <= r_V_4_tr_fu_648_p2(8 downto 1);
    tmp_13_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),9));
    tmp_13_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_11_fu_668_p4));
    tmp_15_fu_827_p1 <= grp_fu_762_p2(16 - 1 downto 0);
    tmp_17_fu_837_p1 <= grp_fu_812_p2(16 - 1 downto 0);
    tmp_18_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V_read_reg_2275),16));
    tmp_19_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V_read_reg_2280),16));
    tmp_20_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_div_K_V_reg_2329),21));
    tmp_21_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_7_phi_fu_438_p4),16));
    tmp_21_mid1_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii8_fu_1245_p2),16));
    tmp_22_fu_971_p4 <= r_V_4_mid2_v_v_v_v_v_fu_963_p3(15 downto 3);
    tmp_23_fu_1946_p2 <= "1" when (signed(r_V_13_fu_1925_p2) < signed(ap_const_lv40_FFFFFF8000)) else "0";
    tmp_24_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),9));
    tmp_24_fu_993_p1 <= r_V_4_mid2_v_v_v_v_v_fu_963_p3(3 - 1 downto 0);
    tmp_25_fu_2144_p1 <= tmp_18_reg_2447(8 - 1 downto 0);
    tmp_26_fu_1030_p2 <= (exitcond_flatten_fu_952_p2 or exitcond2_mid1_fu_1023_p3);
    tmp_27_mid1_fu_2156_p0 <= tmp_18_reg_2447(8 - 1 downto 0);
    tmp_28_mid264_v_fu_1070_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten_reg_2538(0) = '1') else 
        tmp_25_fu_2144_p2;
    tmp_28_mid2_fu_1098_p2 <= std_logic_vector(unsigned(tmp_28_mid2_v_fu_1092_p3) - unsigned(tmp_s_reg_2406));
    tmp_28_mid2_v_fu_1092_p3 <= 
        tmp_27_mid1_fu_2156_p2 when (exitcond2_mid1_reg_2566(0) = '1') else 
        tmp_28_mid264_v_fu_1070_p3;
    tmp_30_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_9_phi_fu_460_p4),16));
    tmp_31_fu_1167_p2 <= (w_V_fu_1162_p2 or h_V_fu_1134_p2);
    tmp_32_fu_1960_p2 <= (tmp_23_fu_1946_p2 or icmp_fu_1940_p2);
    tmp_33_mid1_fu_1399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_fu_1379_p2),16));
    tmp_34_fu_1185_p3 <= tmp_31_fu_1167_p2(15 downto 15);
    tmp_34_mid1_fu_1408_p2 <= (w_V_mid1_fu_1403_p2 or h_V_mid2_fu_1260_p3);
    tmp_34_mid_fu_1316_p2 <= (tmp_29_reg_2579 or h_V_mid1_fu_1255_p2);
    tmp_35_fu_1862_p2 <= std_logic_vector(unsigned(tmp12_cast_fu_1858_p1) + unsigned(r_V_4_mid2_reg_2551));
        tmp_36_cast_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_1162_p2),17));

        tmp_36_cast_mid1_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_mid1_fu_1403_p2),17));

        tmp_36_cast_mid_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_reg_2579),17));

    tmp_36_fu_1385_p2 <= (exitcond_flatten1_fu_1232_p2 or exitcond3_mid1_fu_1372_p3);
        tmp_37_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_1162_p2),32));

        tmp_37_cast_mid1_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_mid1_fu_1403_p2),32));

        tmp_37_cast_mid_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_reg_2579),32));

    tmp_38_cast_fu_2169_p0 <= tmp_38_cast_fu_2169_p00(8 - 1 downto 0);
    tmp_38_cast_fu_2169_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_9_phi_fu_460_p4),21));
    tmp_38_cast_fu_2169_p1 <= tmp_20_reg_2489(14 - 1 downto 0);
    tmp_38_cast_mid1_fu_2195_p0 <= tmp_38_cast_mid1_fu_2195_p00(8 - 1 downto 0);
    tmp_38_cast_mid1_fu_2195_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_fu_1379_p2),21));
    tmp_38_cast_mid1_fu_2195_p1 <= tmp_20_reg_2489(14 - 1 downto 0);
    tmp_38_cast_mid2_fu_1426_p3 <= 
        tmp_38_cast_mid1_fu_2195_p2 when (exitcond3_mid1_fu_1372_p3(0) = '1') else 
        tmp_38_cast_mid_fu_1321_p3;
    tmp_38_cast_mid_fu_1321_p3 <= 
        ap_const_lv21_0 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        tmp_38_cast_fu_2169_p2;
    tmp_38_fu_1514_p2 <= std_logic_vector(unsigned(r_V_15_cast_fu_1510_p1) + unsigned(tmp3_cast_mid2_fu_1486_p1));
    tmp_39_fu_1543_p2 <= std_logic_vector(unsigned(grp_fu_2188_p3) + unsigned(tmp5_cast_fu_1539_p1));
    tmp_3_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_out_precision_V),5));
    tmp_40_cast_cast_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1862_p2),46));
    tmp_40_fu_1838_p2 <= std_logic_vector(signed(tmp6_cast_fu_1818_p1) + signed(tmp9_cast_fu_1834_p1));
    tmp_41_fu_1904_p3 <= p_0807_2_reg_467(39 downto 39);
    tmp_42_fu_1930_p4 <= r_V_13_fu_1925_p2(39 downto 15);
    tmp_42_not_mid2_fu_1293_p3 <= 
        rev3_fu_1287_p2 when (exitcond_flatten1_fu_1232_p2(0) = '1') else 
        rev1_fu_1152_p2;
    tmp_43_fu_1978_p2 <= "1" when (unsigned(Lo_assign_cast_mid2_s_reg_2588) > unsigned(Hi_assign_cast_mid2_s_reg_2594)) else "0";
    tmp_44_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_cast_mid2_s_reg_2588),8));
    tmp_45_fu_1985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_cast_mid2_s_reg_2594),8));
        tmp_46_cast_cast_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_1514_p2),47));

    tmp_46_fu_1988_p2 <= (tmp_44_fu_1982_p1 xor ap_const_lv8_7F);
    tmp_47_fu_1994_p3 <= 
        tmp_44_fu_1982_p1 when (tmp_43_fu_1978_p2(0) = '1') else 
        tmp_45_fu_1985_p1;
    tmp_48_cast_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_mid2_fu_1391_p3),21));
    tmp_48_fu_2002_p3 <= 
        tmp_45_fu_1985_p1 when (tmp_43_fu_1978_p2(0) = '1') else 
        tmp_44_fu_1982_p1;
    tmp_49_fu_2010_p3 <= 
        tmp_46_fu_1988_p2 when (tmp_43_fu_1978_p2(0) = '1') else 
        tmp_44_fu_1982_p1;
    tmp_4_fu_610_p4 <= p_neg1_fu_604_p2(8 downto 1);
    tmp_50_fu_2018_p2 <= (tmp_47_fu_1994_p3 xor ap_const_lv8_7F);
    tmp_51_cast_cast_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1543_p2),46));
    tmp_51_fu_2024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_2010_p3),128));
    tmp_52_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_2002_p3),128));
    tmp_53_fu_2032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_2018_p2),128));
    tmp_54_fu_2036_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_1974_p1),to_integer(unsigned('0' & tmp_51_fu_2024_p1(31-1 downto 0)))));
    
    tmp_55_fu_2042_p4_proc : process(tmp_54_fu_2036_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_55_fu_2042_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_54_fu_2036_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_55_fu_2042_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_55_fu_2042_p4_i) := tmp_54_fu_2036_p2(128-1-tmp_55_fu_2042_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_55_fu_2042_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_56_fu_2052_p3 <= 
        tmp_55_fu_2042_p4 when (tmp_43_fu_1978_p2(0) = '1') else 
        tmp_54_fu_2036_p2;
    tmp_57_fu_2060_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_52_fu_2028_p1(31-1 downto 0)))));
    tmp_58_fu_2066_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_53_fu_2032_p1(31-1 downto 0)))));
    tmp_59_fu_2078_p2 <= (p_demorgan_fu_2072_p2 xor ap_const_lv128_lc_2);
    tmp_5_fu_596_p3 <= r_V_3_tr_fu_590_p2(8 downto 8);
    tmp_60_fu_2084_p2 <= (tmp_59_fu_2078_p2 and p_Val2_s_reg_2803);
    tmp_61_fu_2089_p2 <= (tmp_56_fu_2052_p3 and p_demorgan_fu_2072_p2);
    tmp_63_fu_1328_p3 <= tmp_34_mid_fu_1316_p2(15 downto 15);
    tmp_64_fu_1433_p3 <= tmp_34_mid1_fu_1408_p2(15 downto 15);
    tmp_65_fu_1596_p1 <= ap_phi_mux_p_Val2_1_phi_fu_505_p4(16 - 1 downto 0);
    tmp_66_fu_1600_p1 <= ap_phi_mux_p_Val2_2_phi_fu_494_p4(16 - 1 downto 0);
    tmp_6_cast_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_2319),46));
    tmp_6_fu_654_p3 <= r_V_4_tr_fu_648_p2(8 downto 8);
    tmp_7_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_2343),16));
    tmp_8_fu_620_p4 <= r_V_3_tr_fu_590_p2(8 downto 1);
    tmp_9_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_4_fu_610_p4));
    tmp_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_2314),46));
    tmp_s_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_reg_2348),16));
    w_V_fu_1162_p2 <= std_logic_vector(unsigned(tmp_30_fu_1158_p1) + unsigned(tmp_29_reg_2579));
    w_V_mid1_fu_1403_p2 <= std_logic_vector(unsigned(tmp_33_mid1_fu_1399_p1) + unsigned(tmp_29_reg_2579));
end behav;
