-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_r_TLAST : OUT STD_LOGIC;
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pool,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=61.536000,HLS_SYN_LAT=644,HLS_SYN_TPT=639,HLS_SYN_MEM=32,HLS_SYN_DSP=32,HLS_SYN_FF=9316,HLS_SYN_LUT=18303}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ch_div_K : STD_LOGIC_VECTOR (31 downto 0);
    signal height_in : STD_LOGIC_VECTOR (31 downto 0);
    signal width_in : STD_LOGIC_VECTOR (31 downto 0);
    signal height_out : STD_LOGIC_VECTOR (31 downto 0);
    signal width_out : STD_LOGIC_VECTOR (31 downto 0);
    signal Kx : STD_LOGIC_VECTOR (31 downto 0);
    signal Ky : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D_U0_ap_start : STD_LOGIC;
    signal pool_1D_U0_ap_done : STD_LOGIC;
    signal pool_1D_U0_ap_continue : STD_LOGIC;
    signal pool_1D_U0_ap_idle : STD_LOGIC;
    signal pool_1D_U0_ap_ready : STD_LOGIC;
    signal pool_1D_U0_in_V_V_TREADY : STD_LOGIC;
    signal pool_1D_U0_out_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_1D_U0_out_V_V_write : STD_LOGIC;
    signal pool_2D_U0_ap_start : STD_LOGIC;
    signal pool_2D_U0_ap_done : STD_LOGIC;
    signal pool_2D_U0_ap_continue : STD_LOGIC;
    signal pool_2D_U0_ap_idle : STD_LOGIC;
    signal pool_2D_U0_ap_ready : STD_LOGIC;
    signal pool_2D_U0_in_V_V_read : STD_LOGIC;
    signal pool_2D_U0_out_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_2D_U0_out_V_V_write : STD_LOGIC;
    signal hs2axis_U0_ap_start : STD_LOGIC;
    signal hs2axis_U0_ap_done : STD_LOGIC;
    signal hs2axis_U0_ap_continue : STD_LOGIC;
    signal hs2axis_U0_ap_idle : STD_LOGIC;
    signal hs2axis_U0_ap_ready : STD_LOGIC;
    signal hs2axis_U0_in_V_V_read : STD_LOGIC;
    signal hs2axis_U0_out_r_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal hs2axis_U0_out_r_TVALID : STD_LOGIC;
    signal hs2axis_U0_out_r_TLAST : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal stream_tp_V_V_full_n : STD_LOGIC;
    signal stream_tp_V_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_tp_V_V_empty_n : STD_LOGIC;
    signal stream_tp2_V_V_full_n : STD_LOGIC;
    signal stream_tp2_V_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_tp2_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_pool_1D_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_pool_1D_U0_ap_ready : STD_LOGIC;
    signal pool_1D_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_pool_2D_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_pool_2D_U0_ap_ready : STD_LOGIC;
    signal pool_2D_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_hs2axis_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_hs2axis_U0_ap_ready : STD_LOGIC;
    signal hs2axis_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal pool_1D_U0_start_full_n : STD_LOGIC;
    signal pool_1D_U0_start_write : STD_LOGIC;
    signal pool_2D_U0_start_full_n : STD_LOGIC;
    signal pool_2D_U0_start_write : STD_LOGIC;
    signal hs2axis_U0_start_full_n : STD_LOGIC;
    signal hs2axis_U0_start_write : STD_LOGIC;

    component pool_1D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        in_V_V_TVALID : IN STD_LOGIC;
        in_V_V_TREADY : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        ch_div_K : IN STD_LOGIC_VECTOR (31 downto 0);
        height_in : IN STD_LOGIC_VECTOR (31 downto 0);
        width_in : IN STD_LOGIC_VECTOR (31 downto 0);
        Kx : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pool_2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        ch_div_K : IN STD_LOGIC_VECTOR (31 downto 0);
        height_in : IN STD_LOGIC_VECTOR (31 downto 0);
        width_out : IN STD_LOGIC_VECTOR (31 downto 0);
        Ky : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hs2axis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TLAST : OUT STD_LOGIC;
        ch_div_K : IN STD_LOGIC_VECTOR (31 downto 0);
        height_out : IN STD_LOGIC_VECTOR (31 downto 0);
        width_out : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w128_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w128_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ch_div_K : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kx : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ky : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pool_AXILiteS_s_axi_U : component pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ch_div_K => ch_div_K,
        height_in => height_in,
        width_in => width_in,
        height_out => height_out,
        width_out => width_out,
        Kx => Kx,
        Ky => Ky);

    pool_1D_U0 : component pool_1D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_1D_U0_ap_start,
        ap_done => pool_1D_U0_ap_done,
        ap_continue => pool_1D_U0_ap_continue,
        ap_idle => pool_1D_U0_ap_idle,
        ap_ready => pool_1D_U0_ap_ready,
        in_V_V_TDATA => in_V_V_TDATA,
        in_V_V_TVALID => in_V_V_TVALID,
        in_V_V_TREADY => pool_1D_U0_in_V_V_TREADY,
        out_V_V_din => pool_1D_U0_out_V_V_din,
        out_V_V_full_n => stream_tp_V_V_full_n,
        out_V_V_write => pool_1D_U0_out_V_V_write,
        ch_div_K => ch_div_K,
        height_in => height_in,
        width_in => width_in,
        Kx => Kx);

    pool_2D_U0 : component pool_2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2D_U0_ap_start,
        ap_done => pool_2D_U0_ap_done,
        ap_continue => pool_2D_U0_ap_continue,
        ap_idle => pool_2D_U0_ap_idle,
        ap_ready => pool_2D_U0_ap_ready,
        in_V_V_dout => stream_tp_V_V_dout,
        in_V_V_empty_n => stream_tp_V_V_empty_n,
        in_V_V_read => pool_2D_U0_in_V_V_read,
        out_V_V_din => pool_2D_U0_out_V_V_din,
        out_V_V_full_n => stream_tp2_V_V_full_n,
        out_V_V_write => pool_2D_U0_out_V_V_write,
        ch_div_K => ch_div_K,
        height_in => height_in,
        width_out => width_out,
        Ky => Ky);

    hs2axis_U0 : component hs2axis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hs2axis_U0_ap_start,
        ap_done => hs2axis_U0_ap_done,
        ap_continue => hs2axis_U0_ap_continue,
        ap_idle => hs2axis_U0_ap_idle,
        ap_ready => hs2axis_U0_ap_ready,
        in_V_V_dout => stream_tp2_V_V_dout,
        in_V_V_empty_n => stream_tp2_V_V_empty_n,
        in_V_V_read => hs2axis_U0_in_V_V_read,
        out_r_TDATA => hs2axis_U0_out_r_TDATA,
        out_r_TVALID => hs2axis_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TLAST => hs2axis_U0_out_r_TLAST,
        ch_div_K => ch_div_K,
        height_out => height_out,
        width_out => width_out);

    stream_tp_V_V_U : component fifo_w128_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D_U0_out_V_V_din,
        if_full_n => stream_tp_V_V_full_n,
        if_write => pool_1D_U0_out_V_V_write,
        if_dout => stream_tp_V_V_dout,
        if_empty_n => stream_tp_V_V_empty_n,
        if_read => pool_2D_U0_in_V_V_read);

    stream_tp2_V_V_U : component fifo_w128_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2D_U0_out_V_V_din,
        if_full_n => stream_tp2_V_V_full_n,
        if_write => pool_2D_U0_out_V_V_write,
        if_dout => stream_tp2_V_V_dout,
        if_empty_n => stream_tp2_V_V_empty_n,
        if_read => hs2axis_U0_in_V_V_read);





    ap_sync_reg_hs2axis_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_hs2axis_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_hs2axis_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_hs2axis_U0_ap_ready <= ap_sync_hs2axis_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_pool_1D_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_pool_1D_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_pool_1D_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_pool_1D_U0_ap_ready <= ap_sync_pool_1D_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_pool_2D_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_pool_2D_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_pool_2D_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_pool_2D_U0_ap_ready <= ap_sync_pool_2D_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    hs2axis_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((hs2axis_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                hs2axis_U0_ap_ready_count <= std_logic_vector(unsigned(hs2axis_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (hs2axis_U0_ap_ready = ap_const_logic_1))) then 
                hs2axis_U0_ap_ready_count <= std_logic_vector(unsigned(hs2axis_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    pool_1D_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pool_1D_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                pool_1D_U0_ap_ready_count <= std_logic_vector(unsigned(pool_1D_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (pool_1D_U0_ap_ready = ap_const_logic_1))) then 
                pool_1D_U0_ap_ready_count <= std_logic_vector(unsigned(pool_1D_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    pool_2D_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pool_2D_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                pool_2D_U0_ap_ready_count <= std_logic_vector(unsigned(pool_2D_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (pool_2D_U0_ap_ready = ap_const_logic_1))) then 
                pool_2D_U0_ap_ready_count <= std_logic_vector(unsigned(pool_2D_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= hs2axis_U0_ap_done;
    ap_idle <= (pool_2D_U0_ap_idle and pool_1D_U0_ap_idle and hs2axis_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= hs2axis_U0_ap_done;
    ap_sync_hs2axis_U0_ap_ready <= (hs2axis_U0_ap_ready or ap_sync_reg_hs2axis_U0_ap_ready);
    ap_sync_pool_1D_U0_ap_ready <= (pool_1D_U0_ap_ready or ap_sync_reg_pool_1D_U0_ap_ready);
    ap_sync_pool_2D_U0_ap_ready <= (pool_2D_U0_ap_ready or ap_sync_reg_pool_2D_U0_ap_ready);
    ap_sync_ready <= (ap_sync_pool_2D_U0_ap_ready and ap_sync_pool_1D_U0_ap_ready and ap_sync_hs2axis_U0_ap_ready);
    hs2axis_U0_ap_continue <= ap_const_logic_1;
    hs2axis_U0_ap_start <= ((ap_sync_reg_hs2axis_U0_ap_ready xor ap_const_logic_1) and ap_start);
    hs2axis_U0_start_full_n <= ap_const_logic_1;
    hs2axis_U0_start_write <= ap_const_logic_0;
    in_V_V_TREADY <= pool_1D_U0_in_V_V_TREADY;
    out_r_TDATA <= hs2axis_U0_out_r_TDATA;
    out_r_TLAST <= hs2axis_U0_out_r_TLAST;
    out_r_TVALID <= hs2axis_U0_out_r_TVALID;
    pool_1D_U0_ap_continue <= ap_const_logic_1;
    pool_1D_U0_ap_start <= ((ap_sync_reg_pool_1D_U0_ap_ready xor ap_const_logic_1) and ap_start);
    pool_1D_U0_start_full_n <= ap_const_logic_1;
    pool_1D_U0_start_write <= ap_const_logic_0;
    pool_2D_U0_ap_continue <= ap_const_logic_1;
    pool_2D_U0_ap_start <= ((ap_sync_reg_pool_2D_U0_ap_ready xor ap_const_logic_1) and ap_start);
    pool_2D_U0_start_full_n <= ap_const_logic_1;
    pool_2D_U0_start_write <= ap_const_logic_0;
end behav;
