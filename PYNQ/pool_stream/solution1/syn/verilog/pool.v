// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pool,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=61.536000,HLS_SYN_LAT=644,HLS_SYN_TPT=639,HLS_SYN_MEM=32,HLS_SYN_DSP=32,HLS_SYN_FF=9316,HLS_SYN_LUT=18303}" *)

module pool (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        in_V_V_TDATA,
        out_r_TDATA,
        out_r_TLAST,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_r_TVALID,
        out_r_TREADY
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [127:0] in_V_V_TDATA;
output  [127:0] out_r_TDATA;
output   out_r_TLAST;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output   out_r_TVALID;
input   out_r_TREADY;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] ch_div_K;
wire   [31:0] height_in;
wire   [31:0] width_in;
wire   [31:0] height_out;
wire   [31:0] width_out;
wire   [31:0] Kx;
wire   [31:0] Ky;
wire    pool_1D_U0_ap_start;
wire    pool_1D_U0_ap_done;
wire    pool_1D_U0_ap_continue;
wire    pool_1D_U0_ap_idle;
wire    pool_1D_U0_ap_ready;
wire    pool_1D_U0_in_V_V_TREADY;
wire   [127:0] pool_1D_U0_out_V_V_din;
wire    pool_1D_U0_out_V_V_write;
wire    pool_2D_U0_ap_start;
wire    pool_2D_U0_ap_done;
wire    pool_2D_U0_ap_continue;
wire    pool_2D_U0_ap_idle;
wire    pool_2D_U0_ap_ready;
wire    pool_2D_U0_in_V_V_read;
wire   [127:0] pool_2D_U0_out_V_V_din;
wire    pool_2D_U0_out_V_V_write;
wire    hs2axis_U0_ap_start;
wire    hs2axis_U0_ap_done;
wire    hs2axis_U0_ap_continue;
wire    hs2axis_U0_ap_idle;
wire    hs2axis_U0_ap_ready;
wire    hs2axis_U0_in_V_V_read;
wire   [127:0] hs2axis_U0_out_r_TDATA;
wire    hs2axis_U0_out_r_TVALID;
wire    hs2axis_U0_out_r_TLAST;
wire    ap_sync_continue;
wire    stream_tp_V_V_full_n;
wire   [127:0] stream_tp_V_V_dout;
wire    stream_tp_V_V_empty_n;
wire    stream_tp2_V_V_full_n;
wire   [127:0] stream_tp2_V_V_dout;
wire    stream_tp2_V_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_pool_1D_U0_ap_ready;
wire    ap_sync_pool_1D_U0_ap_ready;
reg   [1:0] pool_1D_U0_ap_ready_count;
reg    ap_sync_reg_pool_2D_U0_ap_ready;
wire    ap_sync_pool_2D_U0_ap_ready;
reg   [1:0] pool_2D_U0_ap_ready_count;
reg    ap_sync_reg_hs2axis_U0_ap_ready;
wire    ap_sync_hs2axis_U0_ap_ready;
reg   [1:0] hs2axis_U0_ap_ready_count;
wire    pool_1D_U0_start_full_n;
wire    pool_1D_U0_start_write;
wire    pool_2D_U0_start_full_n;
wire    pool_2D_U0_start_write;
wire    hs2axis_U0_start_full_n;
wire    hs2axis_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_pool_1D_U0_ap_ready = 1'b0;
#0 pool_1D_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_pool_2D_U0_ap_ready = 1'b0;
#0 pool_2D_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_hs2axis_U0_ap_ready = 1'b0;
#0 hs2axis_U0_ap_ready_count = 2'd0;
end

pool_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pool_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ch_div_K(ch_div_K),
    .height_in(height_in),
    .width_in(width_in),
    .height_out(height_out),
    .width_out(width_out),
    .Kx(Kx),
    .Ky(Ky)
);

pool_1D pool_1D_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pool_1D_U0_ap_start),
    .ap_done(pool_1D_U0_ap_done),
    .ap_continue(pool_1D_U0_ap_continue),
    .ap_idle(pool_1D_U0_ap_idle),
    .ap_ready(pool_1D_U0_ap_ready),
    .in_V_V_TDATA(in_V_V_TDATA),
    .in_V_V_TVALID(in_V_V_TVALID),
    .in_V_V_TREADY(pool_1D_U0_in_V_V_TREADY),
    .out_V_V_din(pool_1D_U0_out_V_V_din),
    .out_V_V_full_n(stream_tp_V_V_full_n),
    .out_V_V_write(pool_1D_U0_out_V_V_write),
    .ch_div_K(ch_div_K),
    .height_in(height_in),
    .width_in(width_in),
    .Kx(Kx)
);

pool_2D pool_2D_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pool_2D_U0_ap_start),
    .ap_done(pool_2D_U0_ap_done),
    .ap_continue(pool_2D_U0_ap_continue),
    .ap_idle(pool_2D_U0_ap_idle),
    .ap_ready(pool_2D_U0_ap_ready),
    .in_V_V_dout(stream_tp_V_V_dout),
    .in_V_V_empty_n(stream_tp_V_V_empty_n),
    .in_V_V_read(pool_2D_U0_in_V_V_read),
    .out_V_V_din(pool_2D_U0_out_V_V_din),
    .out_V_V_full_n(stream_tp2_V_V_full_n),
    .out_V_V_write(pool_2D_U0_out_V_V_write),
    .ch_div_K(ch_div_K),
    .height_in(height_in),
    .width_out(width_out),
    .Ky(Ky)
);

hs2axis hs2axis_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(hs2axis_U0_ap_start),
    .ap_done(hs2axis_U0_ap_done),
    .ap_continue(hs2axis_U0_ap_continue),
    .ap_idle(hs2axis_U0_ap_idle),
    .ap_ready(hs2axis_U0_ap_ready),
    .in_V_V_dout(stream_tp2_V_V_dout),
    .in_V_V_empty_n(stream_tp2_V_V_empty_n),
    .in_V_V_read(hs2axis_U0_in_V_V_read),
    .out_r_TDATA(hs2axis_U0_out_r_TDATA),
    .out_r_TVALID(hs2axis_U0_out_r_TVALID),
    .out_r_TREADY(out_r_TREADY),
    .out_r_TLAST(hs2axis_U0_out_r_TLAST),
    .ch_div_K(ch_div_K),
    .height_out(height_out),
    .width_out(width_out)
);

fifo_w128_d8_A stream_tp_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool_1D_U0_out_V_V_din),
    .if_full_n(stream_tp_V_V_full_n),
    .if_write(pool_1D_U0_out_V_V_write),
    .if_dout(stream_tp_V_V_dout),
    .if_empty_n(stream_tp_V_V_empty_n),
    .if_read(pool_2D_U0_in_V_V_read)
);

fifo_w128_d2_A stream_tp2_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool_2D_U0_out_V_V_din),
    .if_full_n(stream_tp2_V_V_full_n),
    .if_write(pool_2D_U0_out_V_V_write),
    .if_dout(stream_tp2_V_V_dout),
    .if_empty_n(stream_tp2_V_V_empty_n),
    .if_read(hs2axis_U0_in_V_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_hs2axis_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_hs2axis_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_hs2axis_U0_ap_ready <= ap_sync_hs2axis_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_pool_1D_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_pool_1D_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_pool_1D_U0_ap_ready <= ap_sync_pool_1D_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_pool_2D_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_pool_2D_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_pool_2D_U0_ap_ready <= ap_sync_pool_2D_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((hs2axis_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        hs2axis_U0_ap_ready_count <= (hs2axis_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (hs2axis_U0_ap_ready == 1'b1))) begin
        hs2axis_U0_ap_ready_count <= (hs2axis_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((pool_1D_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        pool_1D_U0_ap_ready_count <= (pool_1D_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (pool_1D_U0_ap_ready == 1'b1))) begin
        pool_1D_U0_ap_ready_count <= (pool_1D_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((pool_2D_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        pool_2D_U0_ap_ready_count <= (pool_2D_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (pool_2D_U0_ap_ready == 1'b1))) begin
        pool_2D_U0_ap_ready_count <= (pool_2D_U0_ap_ready_count + 2'd1);
    end
end

assign ap_done = hs2axis_U0_ap_done;

assign ap_idle = (pool_2D_U0_ap_idle & pool_1D_U0_ap_idle & hs2axis_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = hs2axis_U0_ap_done;

assign ap_sync_hs2axis_U0_ap_ready = (hs2axis_U0_ap_ready | ap_sync_reg_hs2axis_U0_ap_ready);

assign ap_sync_pool_1D_U0_ap_ready = (pool_1D_U0_ap_ready | ap_sync_reg_pool_1D_U0_ap_ready);

assign ap_sync_pool_2D_U0_ap_ready = (pool_2D_U0_ap_ready | ap_sync_reg_pool_2D_U0_ap_ready);

assign ap_sync_ready = (ap_sync_pool_2D_U0_ap_ready & ap_sync_pool_1D_U0_ap_ready & ap_sync_hs2axis_U0_ap_ready);

assign hs2axis_U0_ap_continue = 1'b1;

assign hs2axis_U0_ap_start = ((ap_sync_reg_hs2axis_U0_ap_ready ^ 1'b1) & ap_start);

assign hs2axis_U0_start_full_n = 1'b1;

assign hs2axis_U0_start_write = 1'b0;

assign in_V_V_TREADY = pool_1D_U0_in_V_V_TREADY;

assign out_r_TDATA = hs2axis_U0_out_r_TDATA;

assign out_r_TLAST = hs2axis_U0_out_r_TLAST;

assign out_r_TVALID = hs2axis_U0_out_r_TVALID;

assign pool_1D_U0_ap_continue = 1'b1;

assign pool_1D_U0_ap_start = ((ap_sync_reg_pool_1D_U0_ap_ready ^ 1'b1) & ap_start);

assign pool_1D_U0_start_full_n = 1'b1;

assign pool_1D_U0_start_write = 1'b0;

assign pool_2D_U0_ap_continue = 1'b1;

assign pool_2D_U0_ap_start = ((ap_sync_reg_pool_2D_U0_ap_ready ^ 1'b1) & ap_start);

assign pool_2D_U0_start_full_n = 1'b1;

assign pool_2D_U0_start_write = 1'b0;

endmodule //pool
