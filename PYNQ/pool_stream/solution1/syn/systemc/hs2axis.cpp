// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hs2axis.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hs2axis::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hs2axis::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> hs2axis::ap_ST_fsm_state1 = "1";
const sc_lv<3> hs2axis::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> hs2axis::ap_ST_fsm_state5 = "100";
const sc_lv<32> hs2axis::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool hs2axis::ap_const_boolean_1 = true;
const sc_lv<1> hs2axis::ap_const_lv1_0 = "0";
const sc_lv<1> hs2axis::ap_const_lv1_1 = "1";
const sc_lv<2> hs2axis::ap_const_lv2_0 = "00";
const sc_lv<2> hs2axis::ap_const_lv2_2 = "10";
const sc_lv<2> hs2axis::ap_const_lv2_3 = "11";
const sc_lv<2> hs2axis::ap_const_lv2_1 = "1";
const sc_lv<32> hs2axis::ap_const_lv32_1 = "1";
const bool hs2axis::ap_const_boolean_0 = false;
const sc_lv<31> hs2axis::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> hs2axis::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<31> hs2axis::ap_const_lv31_1 = "1";
const sc_lv<32> hs2axis::ap_const_lv32_2 = "10";

hs2axis::hs2axis(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( tmp_17_reg_162 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( tmp_17_reg_162 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( tmp_17_reg_162_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_last_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_17_fu_136_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_2_fu_141_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_i_cast_fu_132_p1);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_17_reg_162 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_data_V_1_ack_in);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_data_V_1_data_out);
    sensitive << ( out_V_data_V_1_payload_A );
    sensitive << ( out_V_data_V_1_payload_B );
    sensitive << ( out_V_data_V_1_sel );

    SC_METHOD(thread_out_V_data_V_1_load_A);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_load_B);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_sel);
    sensitive << ( out_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_V_data_V_1_state_cmp_full);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_data_V_1_vld_out);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_last_1_ack_in);
    sensitive << ( out_V_last_1_state );

    SC_METHOD(thread_out_V_last_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_last_1_data_out);
    sensitive << ( out_V_last_1_payload_A );
    sensitive << ( out_V_last_1_payload_B );
    sensitive << ( out_V_last_1_sel );

    SC_METHOD(thread_out_V_last_1_load_A);
    sensitive << ( out_V_last_1_sel_wr );
    sensitive << ( out_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_1_load_B);
    sensitive << ( out_V_last_1_sel_wr );
    sensitive << ( out_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_1_sel);
    sensitive << ( out_V_last_1_sel_rd );

    SC_METHOD(thread_out_V_last_1_state_cmp_full);
    sensitive << ( out_V_last_1_state );

    SC_METHOD(thread_out_V_last_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_last_1_vld_out);
    sensitive << ( out_V_last_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_V_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_17_reg_162 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_17_reg_162_pp0_iter1_reg );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_V_last_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_V_last_1_state );

    SC_METHOD(thread_tmp1_fu_114_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ch_div_K );

    SC_METHOD(thread_tmp1_fu_114_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( width_out );

    SC_METHOD(thread_tmp1_fu_114_p2);
    sensitive << ( tmp1_fu_114_p0 );
    sensitive << ( tmp1_fu_114_p1 );

    SC_METHOD(thread_tmp_16_fu_126_p2);
    sensitive << ( tmp_s_fu_120_p2 );

    SC_METHOD(thread_tmp_17_fu_136_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_120_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_cast_fu_132_p1 );

    SC_METHOD(thread_tmp_last_fu_147_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_16_fu_126_p2 );
    sensitive << ( tmp_17_fu_136_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_cast_fu_132_p1 );

    SC_METHOD(thread_tmp_s_fu_120_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( height_out );

    SC_METHOD(thread_tmp_s_fu_120_p2);
    sensitive << ( tmp1_fu_114_p2 );
    sensitive << ( tmp_s_fu_120_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_last_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_17_fu_136_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    out_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_V_data_V_1_state = "00";
    out_V_last_1_sel_rd = SC_LOGIC_0;
    out_V_last_1_sel_wr = SC_LOGIC_0;
    out_V_last_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hs2axis_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, ch_div_K, "(port)ch_div_K");
    sc_trace(mVcdFile, height_out, "(port)height_out");
    sc_trace(mVcdFile, width_out, "(port)width_out");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_V_data_V_1_data_out, "out_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_V_data_V_1_vld_in, "out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_V_data_V_1_vld_out, "out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_V_data_V_1_ack_in, "out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_V_data_V_1_ack_out, "out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_V_data_V_1_payload_A, "out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_V_data_V_1_payload_B, "out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_V_data_V_1_sel_rd, "out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_data_V_1_sel_wr, "out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_data_V_1_sel, "out_V_data_V_1_sel");
    sc_trace(mVcdFile, out_V_data_V_1_load_A, "out_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_V_data_V_1_load_B, "out_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_V_data_V_1_state, "out_V_data_V_1_state");
    sc_trace(mVcdFile, out_V_data_V_1_state_cmp_full, "out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_last_1_data_out, "out_V_last_1_data_out");
    sc_trace(mVcdFile, out_V_last_1_vld_in, "out_V_last_1_vld_in");
    sc_trace(mVcdFile, out_V_last_1_vld_out, "out_V_last_1_vld_out");
    sc_trace(mVcdFile, out_V_last_1_ack_in, "out_V_last_1_ack_in");
    sc_trace(mVcdFile, out_V_last_1_ack_out, "out_V_last_1_ack_out");
    sc_trace(mVcdFile, out_V_last_1_payload_A, "out_V_last_1_payload_A");
    sc_trace(mVcdFile, out_V_last_1_payload_B, "out_V_last_1_payload_B");
    sc_trace(mVcdFile, out_V_last_1_sel_rd, "out_V_last_1_sel_rd");
    sc_trace(mVcdFile, out_V_last_1_sel_wr, "out_V_last_1_sel_wr");
    sc_trace(mVcdFile, out_V_last_1_sel, "out_V_last_1_sel");
    sc_trace(mVcdFile, out_V_last_1_load_A, "out_V_last_1_load_A");
    sc_trace(mVcdFile, out_V_last_1_load_B, "out_V_last_1_load_B");
    sc_trace(mVcdFile, out_V_last_1_state, "out_V_last_1_state");
    sc_trace(mVcdFile, out_V_last_1_state_cmp_full, "out_V_last_1_state_cmp_full");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_17_reg_162, "tmp_17_reg_162");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_17_reg_162_pp0_iter1_reg, "tmp_17_reg_162_pp0_iter1_reg");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, tmp_s_fu_120_p2, "tmp_s_fu_120_p2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_16_fu_126_p2, "tmp_16_fu_126_p2");
    sc_trace(mVcdFile, tmp_17_fu_136_p2, "tmp_17_fu_136_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_2_fu_141_p2, "i_2_fu_141_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_fu_147_p2, "tmp_last_fu_147_p2");
    sc_trace(mVcdFile, tmp_last_reg_171, "tmp_last_reg_171");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp1_fu_114_p0, "tmp1_fu_114_p0");
    sc_trace(mVcdFile, tmp1_fu_114_p1, "tmp1_fu_114_p1");
    sc_trace(mVcdFile, tmp1_fu_114_p2, "tmp1_fu_114_p2");
    sc_trace(mVcdFile, tmp_s_fu_120_p1, "tmp_s_fu_120_p1");
    sc_trace(mVcdFile, i_cast_fu_132_p1, "i_cast_fu_132_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

hs2axis::~hs2axis() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void hs2axis::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_fu_136_p2.read()))) {
        i_reg_103 = i_2_fu_141_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_103 = ap_const_lv31_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_out.read()))) {
            out_V_data_V_1_sel_rd =  (sc_logic) (~out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_in.read()))) {
            out_V_data_V_1_sel_wr =  (sc_logic) (~out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()))))) {
            out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_vld_out.read()))) {
            out_V_last_1_sel_rd =  (sc_logic) (~out_V_last_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_ack_in.read()))) {
            out_V_last_1_sel_wr =  (sc_logic) (~out_V_last_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_1_state.read())))) {
            out_V_last_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_1_state.read())))) {
            out_V_last_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_ack_out.read()))))) {
            out_V_last_1_state = ap_const_lv2_3;
        } else {
            out_V_last_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_A.read())) {
        out_V_data_V_1_payload_A = in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_B.read())) {
        out_V_data_V_1_payload_B = in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_load_A.read())) {
        out_V_last_1_payload_A =  (sc_logic) (tmp_last_reg_171.read()[0]);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_load_B.read())) {
        out_V_last_1_payload_B =  (sc_logic) (tmp_last_reg_171.read()[0]);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_17_reg_162 = tmp_17_fu_136_p2.read();
        tmp_17_reg_162_pp0_iter1_reg = tmp_17_reg_162.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_fu_136_p2.read()))) {
        tmp_last_reg_171 = tmp_last_fu_147_p2.read();
    }
}

void hs2axis::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void hs2axis::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hs2axis::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void hs2axis::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hs2axis::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void hs2axis::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void hs2axis::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void hs2axis::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void hs2axis::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hs2axis::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void hs2axis::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void hs2axis::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void hs2axis::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hs2axis::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_V_last_1_ack_in.read(), ap_const_logic_0));
}

void hs2axis::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_17_fu_136_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void hs2axis::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void hs2axis::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void hs2axis::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hs2axis::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void hs2axis::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hs2axis::thread_i_2_fu_141_p2() {
    i_2_fu_141_p2 = (!i_reg_103.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_103.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void hs2axis::thread_i_cast_fu_132_p1() {
    i_cast_fu_132_p1 = esl_zext<32,31>(i_reg_103.read());
}

void hs2axis::thread_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void hs2axis::thread_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void hs2axis::thread_out_V_data_V_1_ack_in() {
    out_V_data_V_1_ack_in = out_V_data_V_1_state.read()[1];
}

void hs2axis::thread_out_V_data_V_1_ack_out() {
    out_V_data_V_1_ack_out = out_r_TREADY.read();
}

void hs2axis::thread_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_sel.read())) {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B.read();
    } else {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A.read();
    }
}

void hs2axis::thread_out_V_data_V_1_load_A() {
    out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full.read() & ~out_V_data_V_1_sel_wr.read());
}

void hs2axis::thread_out_V_data_V_1_load_B() {
    out_V_data_V_1_load_B = (out_V_data_V_1_sel_wr.read() & out_V_data_V_1_state_cmp_full.read());
}

void hs2axis::thread_out_V_data_V_1_sel() {
    out_V_data_V_1_sel = out_V_data_V_1_sel_rd.read();
}

void hs2axis::thread_out_V_data_V_1_state_cmp_full() {
    out_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void hs2axis::thread_out_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void hs2axis::thread_out_V_data_V_1_vld_out() {
    out_V_data_V_1_vld_out = out_V_data_V_1_state.read()[0];
}

void hs2axis::thread_out_V_last_1_ack_in() {
    out_V_last_1_ack_in = out_V_last_1_state.read()[1];
}

void hs2axis::thread_out_V_last_1_ack_out() {
    out_V_last_1_ack_out = out_r_TREADY.read();
}

void hs2axis::thread_out_V_last_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_1_sel.read())) {
        out_V_last_1_data_out = out_V_last_1_payload_B.read();
    } else {
        out_V_last_1_data_out = out_V_last_1_payload_A.read();
    }
}

void hs2axis::thread_out_V_last_1_load_A() {
    out_V_last_1_load_A = (out_V_last_1_state_cmp_full.read() & ~out_V_last_1_sel_wr.read());
}

void hs2axis::thread_out_V_last_1_load_B() {
    out_V_last_1_load_B = (out_V_last_1_sel_wr.read() & out_V_last_1_state_cmp_full.read());
}

void hs2axis::thread_out_V_last_1_sel() {
    out_V_last_1_sel = out_V_last_1_sel_rd.read();
}

void hs2axis::thread_out_V_last_1_state_cmp_full() {
    out_V_last_1_state_cmp_full =  (sc_logic) ((!out_V_last_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_last_1_state.read() != ap_const_lv2_1))[0];
}

void hs2axis::thread_out_V_last_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_last_1_vld_in = ap_const_logic_1;
    } else {
        out_V_last_1_vld_in = ap_const_logic_0;
    }
}

void hs2axis::thread_out_V_last_1_vld_out() {
    out_V_last_1_vld_out = out_V_last_1_state.read()[0];
}

void hs2axis::thread_out_r_TDATA() {
    out_r_TDATA = out_V_data_V_1_data_out.read();
}

void hs2axis::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_reg_162_pp0_iter1_reg.read())))) {
        out_r_TDATA_blk_n = out_V_data_V_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void hs2axis::thread_out_r_TLAST() {
    out_r_TLAST = out_V_last_1_data_out.read();
}

void hs2axis::thread_out_r_TVALID() {
    out_r_TVALID = out_V_last_1_state.read()[0];
}

void hs2axis::thread_tmp1_fu_114_p0() {
    tmp1_fu_114_p0 = ch_div_K.read();
}

void hs2axis::thread_tmp1_fu_114_p1() {
    tmp1_fu_114_p1 = width_out.read();
}

void hs2axis::thread_tmp1_fu_114_p2() {
    tmp1_fu_114_p2 = (!tmp1_fu_114_p0.read().is_01() || !tmp1_fu_114_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp1_fu_114_p0.read()) * sc_bigint<32>(tmp1_fu_114_p1.read());
}

void hs2axis::thread_tmp_16_fu_126_p2() {
    tmp_16_fu_126_p2 = (!tmp_s_fu_120_p2.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_fu_120_p2.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void hs2axis::thread_tmp_17_fu_136_p2() {
    tmp_17_fu_136_p2 = (!i_cast_fu_132_p1.read().is_01() || !tmp_s_fu_120_p2.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_132_p1.read()) < sc_bigint<32>(tmp_s_fu_120_p2.read()));
}

void hs2axis::thread_tmp_last_fu_147_p2() {
    tmp_last_fu_147_p2 = (!i_cast_fu_132_p1.read().is_01() || !tmp_16_fu_126_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_132_p1.read() == tmp_16_fu_126_p2.read());
}

void hs2axis::thread_tmp_s_fu_120_p1() {
    tmp_s_fu_120_p1 = height_out.read();
}

void hs2axis::thread_tmp_s_fu_120_p2() {
    tmp_s_fu_120_p2 = (!tmp1_fu_114_p2.read().is_01() || !tmp_s_fu_120_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp1_fu_114_p2.read()) * sc_bigint<32>(tmp_s_fu_120_p1.read());
}

void hs2axis::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(tmp_17_fu_136_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_17_fu_136_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_V_last_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

